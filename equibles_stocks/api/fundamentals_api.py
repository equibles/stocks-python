# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from equibles_stocks.api_client import ApiClient


class FundamentalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dividends(self, full_ticker, **kwargs):  # noqa: E501
        """Get the dividends for a given stock.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dividends(full_ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_ticker: The fully qualified ticker of the stock. Example: AAPL.XNAS (required)
        :param int page: The number of the page to request.
        :param int page_size: The number of elements in each page. Max value: 1000.
        :return: DividendsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dividends_with_http_info(full_ticker, **kwargs)  # noqa: E501
        else:
            (data) = self.dividends_with_http_info(full_ticker, **kwargs)  # noqa: E501
            return data

    def dividends_with_http_info(self, full_ticker, **kwargs):  # noqa: E501
        """Get the dividends for a given stock.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dividends_with_http_info(full_ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_ticker: The fully qualified ticker of the stock. Example: AAPL.XNAS (required)
        :param int page: The number of the page to request.
        :param int page_size: The number of elements in each page. Max value: 1000.
        :return: DividendsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['full_ticker', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dividends" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'full_ticker' is set
        if ('full_ticker' not in params or
                params['full_ticker'] is None):
            raise ValueError("Missing the required parameter `full_ticker` when calling `dividends`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'full_ticker' in params:
            query_params.append(('fullTicker', params['full_ticker']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Query String']  # noqa: E501

        return self.api_client.call_api(
            '/stocks/fundamentals/dividends', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DividendsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def financial_reports(self, full_ticker, year, fiscal_period, **kwargs):  # noqa: E501
        """Get the financial statements for a given stock.  # noqa: E501

        Returns a list of fully qualified ticker names. A fully qualified ticker has the following structure: [Ticker].[ExchangeMic] Example: AAPL.XNAS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.financial_reports(full_ticker, year, fiscal_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_ticker: The fully qualified ticker of the stock. Example: AAPL.XNAS (required)
        :param int year: The year of the report. (required)
        :param FiscalPeriod fiscal_period: The fiscal period of the report. (required)
        :param int page: The number of the page to request.
        :param int page_size: The number of elements in each page. Max value: 50.
        :return: FundamentalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.financial_reports_with_http_info(full_ticker, year, fiscal_period, **kwargs)  # noqa: E501
        else:
            (data) = self.financial_reports_with_http_info(full_ticker, year, fiscal_period, **kwargs)  # noqa: E501
            return data

    def financial_reports_with_http_info(self, full_ticker, year, fiscal_period, **kwargs):  # noqa: E501
        """Get the financial statements for a given stock.  # noqa: E501

        Returns a list of fully qualified ticker names. A fully qualified ticker has the following structure: [Ticker].[ExchangeMic] Example: AAPL.XNAS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.financial_reports_with_http_info(full_ticker, year, fiscal_period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_ticker: The fully qualified ticker of the stock. Example: AAPL.XNAS (required)
        :param int year: The year of the report. (required)
        :param FiscalPeriod fiscal_period: The fiscal period of the report. (required)
        :param int page: The number of the page to request.
        :param int page_size: The number of elements in each page. Max value: 50.
        :return: FundamentalsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['full_ticker', 'year', 'fiscal_period', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method financial_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'full_ticker' is set
        if ('full_ticker' not in params or
                params['full_ticker'] is None):
            raise ValueError("Missing the required parameter `full_ticker` when calling `financial_reports`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `financial_reports`")  # noqa: E501
        # verify the required parameter 'fiscal_period' is set
        if ('fiscal_period' not in params or
                params['fiscal_period'] is None):
            raise ValueError("Missing the required parameter `fiscal_period` when calling `financial_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'full_ticker' in params:
            query_params.append(('fullTicker', params['full_ticker']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'fiscal_period' in params:
            query_params.append(('fiscalPeriod', params['fiscal_period']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Query String']  # noqa: E501

        return self.api_client.call_api(
            '/stocks/fundamentals/financialreports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundamentalsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
