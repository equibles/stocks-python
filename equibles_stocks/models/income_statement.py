# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncomeStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gross_profit': 'int',
        'revenue': 'int',
        'cost_of_revenue': 'int',
        'cost_of_goods_and_services_sold': 'int',
        'operating_income': 'int',
        'selling_general_and_administrative': 'int',
        'research_and_development': 'int',
        'operating_expenses': 'int',
        'investment_income_net': 'int',
        'net_interest_income': 'int',
        'interest_income': 'int',
        'interest_expense': 'int',
        'non_interest_income': 'int',
        'other_non_operating_income': 'int',
        'depreciation': 'int',
        'depreciation_and_amortization': 'int',
        'income_before_tax': 'int',
        'income_tax_expense': 'int',
        'interest_and_debt_expense': 'int',
        'net_income_from_continuing_operations': 'int',
        'comprehensive_income_net_of_tax': 'int',
        'ebit': 'int',
        'ebitda': 'int',
        'net_income': 'int',
        'effect_of_accounting_charges': 'int',
        'tax_provision': 'int',
        'selling_and_marketing_expenses': 'int',
        'extraordinary_items': 'int'
    }

    attribute_map = {
        'gross_profit': 'grossProfit',
        'revenue': 'revenue',
        'cost_of_revenue': 'costOfRevenue',
        'cost_of_goods_and_services_sold': 'costOfGoodsAndServicesSold',
        'operating_income': 'operatingIncome',
        'selling_general_and_administrative': 'sellingGeneralAndAdministrative',
        'research_and_development': 'researchAndDevelopment',
        'operating_expenses': 'operatingExpenses',
        'investment_income_net': 'investmentIncomeNet',
        'net_interest_income': 'netInterestIncome',
        'interest_income': 'interestIncome',
        'interest_expense': 'interestExpense',
        'non_interest_income': 'nonInterestIncome',
        'other_non_operating_income': 'otherNonOperatingIncome',
        'depreciation': 'depreciation',
        'depreciation_and_amortization': 'depreciationAndAmortization',
        'income_before_tax': 'incomeBeforeTax',
        'income_tax_expense': 'incomeTaxExpense',
        'interest_and_debt_expense': 'interestAndDebtExpense',
        'net_income_from_continuing_operations': 'netIncomeFromContinuingOperations',
        'comprehensive_income_net_of_tax': 'comprehensiveIncomeNetOfTax',
        'ebit': 'ebit',
        'ebitda': 'ebitda',
        'net_income': 'netIncome',
        'effect_of_accounting_charges': 'effectOfAccountingCharges',
        'tax_provision': 'taxProvision',
        'selling_and_marketing_expenses': 'sellingAndMarketingExpenses',
        'extraordinary_items': 'extraordinaryItems'
    }

    def __init__(self, gross_profit=None, revenue=None, cost_of_revenue=None, cost_of_goods_and_services_sold=None, operating_income=None, selling_general_and_administrative=None, research_and_development=None, operating_expenses=None, investment_income_net=None, net_interest_income=None, interest_income=None, interest_expense=None, non_interest_income=None, other_non_operating_income=None, depreciation=None, depreciation_and_amortization=None, income_before_tax=None, income_tax_expense=None, interest_and_debt_expense=None, net_income_from_continuing_operations=None, comprehensive_income_net_of_tax=None, ebit=None, ebitda=None, net_income=None, effect_of_accounting_charges=None, tax_provision=None, selling_and_marketing_expenses=None, extraordinary_items=None):  # noqa: E501
        """IncomeStatement - a model defined in Swagger"""  # noqa: E501
        self._gross_profit = None
        self._revenue = None
        self._cost_of_revenue = None
        self._cost_of_goods_and_services_sold = None
        self._operating_income = None
        self._selling_general_and_administrative = None
        self._research_and_development = None
        self._operating_expenses = None
        self._investment_income_net = None
        self._net_interest_income = None
        self._interest_income = None
        self._interest_expense = None
        self._non_interest_income = None
        self._other_non_operating_income = None
        self._depreciation = None
        self._depreciation_and_amortization = None
        self._income_before_tax = None
        self._income_tax_expense = None
        self._interest_and_debt_expense = None
        self._net_income_from_continuing_operations = None
        self._comprehensive_income_net_of_tax = None
        self._ebit = None
        self._ebitda = None
        self._net_income = None
        self._effect_of_accounting_charges = None
        self._tax_provision = None
        self._selling_and_marketing_expenses = None
        self._extraordinary_items = None
        self.discriminator = None
        if gross_profit is not None:
            self.gross_profit = gross_profit
        if revenue is not None:
            self.revenue = revenue
        if cost_of_revenue is not None:
            self.cost_of_revenue = cost_of_revenue
        if cost_of_goods_and_services_sold is not None:
            self.cost_of_goods_and_services_sold = cost_of_goods_and_services_sold
        if operating_income is not None:
            self.operating_income = operating_income
        if selling_general_and_administrative is not None:
            self.selling_general_and_administrative = selling_general_and_administrative
        if research_and_development is not None:
            self.research_and_development = research_and_development
        if operating_expenses is not None:
            self.operating_expenses = operating_expenses
        if investment_income_net is not None:
            self.investment_income_net = investment_income_net
        if net_interest_income is not None:
            self.net_interest_income = net_interest_income
        if interest_income is not None:
            self.interest_income = interest_income
        if interest_expense is not None:
            self.interest_expense = interest_expense
        if non_interest_income is not None:
            self.non_interest_income = non_interest_income
        if other_non_operating_income is not None:
            self.other_non_operating_income = other_non_operating_income
        if depreciation is not None:
            self.depreciation = depreciation
        if depreciation_and_amortization is not None:
            self.depreciation_and_amortization = depreciation_and_amortization
        if income_before_tax is not None:
            self.income_before_tax = income_before_tax
        if income_tax_expense is not None:
            self.income_tax_expense = income_tax_expense
        if interest_and_debt_expense is not None:
            self.interest_and_debt_expense = interest_and_debt_expense
        if net_income_from_continuing_operations is not None:
            self.net_income_from_continuing_operations = net_income_from_continuing_operations
        if comprehensive_income_net_of_tax is not None:
            self.comprehensive_income_net_of_tax = comprehensive_income_net_of_tax
        if ebit is not None:
            self.ebit = ebit
        if ebitda is not None:
            self.ebitda = ebitda
        if net_income is not None:
            self.net_income = net_income
        if effect_of_accounting_charges is not None:
            self.effect_of_accounting_charges = effect_of_accounting_charges
        if tax_provision is not None:
            self.tax_provision = tax_provision
        if selling_and_marketing_expenses is not None:
            self.selling_and_marketing_expenses = selling_and_marketing_expenses
        if extraordinary_items is not None:
            self.extraordinary_items = extraordinary_items

    @property
    def gross_profit(self):
        """Gets the gross_profit of this IncomeStatement.  # noqa: E501


        :return: The gross_profit of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._gross_profit

    @gross_profit.setter
    def gross_profit(self, gross_profit):
        """Sets the gross_profit of this IncomeStatement.


        :param gross_profit: The gross_profit of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._gross_profit = gross_profit

    @property
    def revenue(self):
        """Gets the revenue of this IncomeStatement.  # noqa: E501


        :return: The revenue of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this IncomeStatement.


        :param revenue: The revenue of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._revenue = revenue

    @property
    def cost_of_revenue(self):
        """Gets the cost_of_revenue of this IncomeStatement.  # noqa: E501


        :return: The cost_of_revenue of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._cost_of_revenue

    @cost_of_revenue.setter
    def cost_of_revenue(self, cost_of_revenue):
        """Sets the cost_of_revenue of this IncomeStatement.


        :param cost_of_revenue: The cost_of_revenue of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._cost_of_revenue = cost_of_revenue

    @property
    def cost_of_goods_and_services_sold(self):
        """Gets the cost_of_goods_and_services_sold of this IncomeStatement.  # noqa: E501


        :return: The cost_of_goods_and_services_sold of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._cost_of_goods_and_services_sold

    @cost_of_goods_and_services_sold.setter
    def cost_of_goods_and_services_sold(self, cost_of_goods_and_services_sold):
        """Sets the cost_of_goods_and_services_sold of this IncomeStatement.


        :param cost_of_goods_and_services_sold: The cost_of_goods_and_services_sold of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._cost_of_goods_and_services_sold = cost_of_goods_and_services_sold

    @property
    def operating_income(self):
        """Gets the operating_income of this IncomeStatement.  # noqa: E501


        :return: The operating_income of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._operating_income

    @operating_income.setter
    def operating_income(self, operating_income):
        """Sets the operating_income of this IncomeStatement.


        :param operating_income: The operating_income of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._operating_income = operating_income

    @property
    def selling_general_and_administrative(self):
        """Gets the selling_general_and_administrative of this IncomeStatement.  # noqa: E501


        :return: The selling_general_and_administrative of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._selling_general_and_administrative

    @selling_general_and_administrative.setter
    def selling_general_and_administrative(self, selling_general_and_administrative):
        """Sets the selling_general_and_administrative of this IncomeStatement.


        :param selling_general_and_administrative: The selling_general_and_administrative of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._selling_general_and_administrative = selling_general_and_administrative

    @property
    def research_and_development(self):
        """Gets the research_and_development of this IncomeStatement.  # noqa: E501


        :return: The research_and_development of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._research_and_development

    @research_and_development.setter
    def research_and_development(self, research_and_development):
        """Sets the research_and_development of this IncomeStatement.


        :param research_and_development: The research_and_development of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._research_and_development = research_and_development

    @property
    def operating_expenses(self):
        """Gets the operating_expenses of this IncomeStatement.  # noqa: E501


        :return: The operating_expenses of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._operating_expenses

    @operating_expenses.setter
    def operating_expenses(self, operating_expenses):
        """Sets the operating_expenses of this IncomeStatement.


        :param operating_expenses: The operating_expenses of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._operating_expenses = operating_expenses

    @property
    def investment_income_net(self):
        """Gets the investment_income_net of this IncomeStatement.  # noqa: E501


        :return: The investment_income_net of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._investment_income_net

    @investment_income_net.setter
    def investment_income_net(self, investment_income_net):
        """Sets the investment_income_net of this IncomeStatement.


        :param investment_income_net: The investment_income_net of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._investment_income_net = investment_income_net

    @property
    def net_interest_income(self):
        """Gets the net_interest_income of this IncomeStatement.  # noqa: E501


        :return: The net_interest_income of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._net_interest_income

    @net_interest_income.setter
    def net_interest_income(self, net_interest_income):
        """Sets the net_interest_income of this IncomeStatement.


        :param net_interest_income: The net_interest_income of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._net_interest_income = net_interest_income

    @property
    def interest_income(self):
        """Gets the interest_income of this IncomeStatement.  # noqa: E501


        :return: The interest_income of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._interest_income

    @interest_income.setter
    def interest_income(self, interest_income):
        """Sets the interest_income of this IncomeStatement.


        :param interest_income: The interest_income of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._interest_income = interest_income

    @property
    def interest_expense(self):
        """Gets the interest_expense of this IncomeStatement.  # noqa: E501


        :return: The interest_expense of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._interest_expense

    @interest_expense.setter
    def interest_expense(self, interest_expense):
        """Sets the interest_expense of this IncomeStatement.


        :param interest_expense: The interest_expense of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._interest_expense = interest_expense

    @property
    def non_interest_income(self):
        """Gets the non_interest_income of this IncomeStatement.  # noqa: E501


        :return: The non_interest_income of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._non_interest_income

    @non_interest_income.setter
    def non_interest_income(self, non_interest_income):
        """Sets the non_interest_income of this IncomeStatement.


        :param non_interest_income: The non_interest_income of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._non_interest_income = non_interest_income

    @property
    def other_non_operating_income(self):
        """Gets the other_non_operating_income of this IncomeStatement.  # noqa: E501


        :return: The other_non_operating_income of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._other_non_operating_income

    @other_non_operating_income.setter
    def other_non_operating_income(self, other_non_operating_income):
        """Sets the other_non_operating_income of this IncomeStatement.


        :param other_non_operating_income: The other_non_operating_income of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._other_non_operating_income = other_non_operating_income

    @property
    def depreciation(self):
        """Gets the depreciation of this IncomeStatement.  # noqa: E501


        :return: The depreciation of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._depreciation

    @depreciation.setter
    def depreciation(self, depreciation):
        """Sets the depreciation of this IncomeStatement.


        :param depreciation: The depreciation of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._depreciation = depreciation

    @property
    def depreciation_and_amortization(self):
        """Gets the depreciation_and_amortization of this IncomeStatement.  # noqa: E501


        :return: The depreciation_and_amortization of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._depreciation_and_amortization

    @depreciation_and_amortization.setter
    def depreciation_and_amortization(self, depreciation_and_amortization):
        """Sets the depreciation_and_amortization of this IncomeStatement.


        :param depreciation_and_amortization: The depreciation_and_amortization of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._depreciation_and_amortization = depreciation_and_amortization

    @property
    def income_before_tax(self):
        """Gets the income_before_tax of this IncomeStatement.  # noqa: E501


        :return: The income_before_tax of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._income_before_tax

    @income_before_tax.setter
    def income_before_tax(self, income_before_tax):
        """Sets the income_before_tax of this IncomeStatement.


        :param income_before_tax: The income_before_tax of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._income_before_tax = income_before_tax

    @property
    def income_tax_expense(self):
        """Gets the income_tax_expense of this IncomeStatement.  # noqa: E501


        :return: The income_tax_expense of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._income_tax_expense

    @income_tax_expense.setter
    def income_tax_expense(self, income_tax_expense):
        """Sets the income_tax_expense of this IncomeStatement.


        :param income_tax_expense: The income_tax_expense of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._income_tax_expense = income_tax_expense

    @property
    def interest_and_debt_expense(self):
        """Gets the interest_and_debt_expense of this IncomeStatement.  # noqa: E501


        :return: The interest_and_debt_expense of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._interest_and_debt_expense

    @interest_and_debt_expense.setter
    def interest_and_debt_expense(self, interest_and_debt_expense):
        """Sets the interest_and_debt_expense of this IncomeStatement.


        :param interest_and_debt_expense: The interest_and_debt_expense of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._interest_and_debt_expense = interest_and_debt_expense

    @property
    def net_income_from_continuing_operations(self):
        """Gets the net_income_from_continuing_operations of this IncomeStatement.  # noqa: E501


        :return: The net_income_from_continuing_operations of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._net_income_from_continuing_operations

    @net_income_from_continuing_operations.setter
    def net_income_from_continuing_operations(self, net_income_from_continuing_operations):
        """Sets the net_income_from_continuing_operations of this IncomeStatement.


        :param net_income_from_continuing_operations: The net_income_from_continuing_operations of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._net_income_from_continuing_operations = net_income_from_continuing_operations

    @property
    def comprehensive_income_net_of_tax(self):
        """Gets the comprehensive_income_net_of_tax of this IncomeStatement.  # noqa: E501


        :return: The comprehensive_income_net_of_tax of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._comprehensive_income_net_of_tax

    @comprehensive_income_net_of_tax.setter
    def comprehensive_income_net_of_tax(self, comprehensive_income_net_of_tax):
        """Sets the comprehensive_income_net_of_tax of this IncomeStatement.


        :param comprehensive_income_net_of_tax: The comprehensive_income_net_of_tax of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._comprehensive_income_net_of_tax = comprehensive_income_net_of_tax

    @property
    def ebit(self):
        """Gets the ebit of this IncomeStatement.  # noqa: E501


        :return: The ebit of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._ebit

    @ebit.setter
    def ebit(self, ebit):
        """Sets the ebit of this IncomeStatement.


        :param ebit: The ebit of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._ebit = ebit

    @property
    def ebitda(self):
        """Gets the ebitda of this IncomeStatement.  # noqa: E501


        :return: The ebitda of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._ebitda

    @ebitda.setter
    def ebitda(self, ebitda):
        """Sets the ebitda of this IncomeStatement.


        :param ebitda: The ebitda of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._ebitda = ebitda

    @property
    def net_income(self):
        """Gets the net_income of this IncomeStatement.  # noqa: E501


        :return: The net_income of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this IncomeStatement.


        :param net_income: The net_income of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._net_income = net_income

    @property
    def effect_of_accounting_charges(self):
        """Gets the effect_of_accounting_charges of this IncomeStatement.  # noqa: E501


        :return: The effect_of_accounting_charges of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._effect_of_accounting_charges

    @effect_of_accounting_charges.setter
    def effect_of_accounting_charges(self, effect_of_accounting_charges):
        """Sets the effect_of_accounting_charges of this IncomeStatement.


        :param effect_of_accounting_charges: The effect_of_accounting_charges of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._effect_of_accounting_charges = effect_of_accounting_charges

    @property
    def tax_provision(self):
        """Gets the tax_provision of this IncomeStatement.  # noqa: E501


        :return: The tax_provision of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._tax_provision

    @tax_provision.setter
    def tax_provision(self, tax_provision):
        """Sets the tax_provision of this IncomeStatement.


        :param tax_provision: The tax_provision of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._tax_provision = tax_provision

    @property
    def selling_and_marketing_expenses(self):
        """Gets the selling_and_marketing_expenses of this IncomeStatement.  # noqa: E501


        :return: The selling_and_marketing_expenses of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._selling_and_marketing_expenses

    @selling_and_marketing_expenses.setter
    def selling_and_marketing_expenses(self, selling_and_marketing_expenses):
        """Sets the selling_and_marketing_expenses of this IncomeStatement.


        :param selling_and_marketing_expenses: The selling_and_marketing_expenses of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._selling_and_marketing_expenses = selling_and_marketing_expenses

    @property
    def extraordinary_items(self):
        """Gets the extraordinary_items of this IncomeStatement.  # noqa: E501


        :return: The extraordinary_items of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._extraordinary_items

    @extraordinary_items.setter
    def extraordinary_items(self, extraordinary_items):
        """Sets the extraordinary_items of this IncomeStatement.


        :param extraordinary_items: The extraordinary_items of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._extraordinary_items = extraordinary_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomeStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomeStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
