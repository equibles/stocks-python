# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockSplit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_date': 'datetime',
        'for_factor': 'int',
        'to_factor': 'int',
        'ratio': 'float'
    }

    attribute_map = {
        'execution_date': 'executionDate',
        'for_factor': 'forFactor',
        'to_factor': 'toFactor',
        'ratio': 'ratio'
    }

    def __init__(self, execution_date=None, for_factor=None, to_factor=None, ratio=None):  # noqa: E501
        """StockSplit - a model defined in Swagger"""  # noqa: E501
        self._execution_date = None
        self._for_factor = None
        self._to_factor = None
        self._ratio = None
        self.discriminator = None
        if execution_date is not None:
            self.execution_date = execution_date
        if for_factor is not None:
            self.for_factor = for_factor
        if to_factor is not None:
            self.to_factor = to_factor
        if ratio is not None:
            self.ratio = ratio

    @property
    def execution_date(self):
        """Gets the execution_date of this StockSplit.  # noqa: E501


        :return: The execution_date of this StockSplit.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this StockSplit.


        :param execution_date: The execution_date of this StockSplit.  # noqa: E501
        :type: datetime
        """

        self._execution_date = execution_date

    @property
    def for_factor(self):
        """Gets the for_factor of this StockSplit.  # noqa: E501


        :return: The for_factor of this StockSplit.  # noqa: E501
        :rtype: int
        """
        return self._for_factor

    @for_factor.setter
    def for_factor(self, for_factor):
        """Sets the for_factor of this StockSplit.


        :param for_factor: The for_factor of this StockSplit.  # noqa: E501
        :type: int
        """

        self._for_factor = for_factor

    @property
    def to_factor(self):
        """Gets the to_factor of this StockSplit.  # noqa: E501


        :return: The to_factor of this StockSplit.  # noqa: E501
        :rtype: int
        """
        return self._to_factor

    @to_factor.setter
    def to_factor(self, to_factor):
        """Sets the to_factor of this StockSplit.


        :param to_factor: The to_factor of this StockSplit.  # noqa: E501
        :type: int
        """

        self._to_factor = to_factor

    @property
    def ratio(self):
        """Gets the ratio of this StockSplit.  # noqa: E501


        :return: The ratio of this StockSplit.  # noqa: E501
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this StockSplit.


        :param ratio: The ratio of this StockSplit.  # noqa: E501
        :type: float
        """

        self._ratio = ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockSplit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockSplit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
