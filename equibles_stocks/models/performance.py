# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Performance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'one_day': 'float',
        'one_week': 'float',
        'two_weeks': 'float',
        'one_month': 'float',
        'three_months': 'float',
        'six_months': 'float',
        'year_to_date': 'float',
        'one_year': 'float',
        'two_years': 'float',
        'two_years_annualized': 'float',
        'three_years': 'float',
        'three_years_annualized': 'float',
        'five_years': 'float',
        'five_years_annualized': 'float',
        'ten_years': 'float',
        'ten_years_annualized': 'float',
        'twenty_years': 'float',
        'twenty_years_annualized': 'float'
    }

    attribute_map = {
        'one_day': 'oneDay',
        'one_week': 'oneWeek',
        'two_weeks': 'twoWeeks',
        'one_month': 'oneMonth',
        'three_months': 'threeMonths',
        'six_months': 'sixMonths',
        'year_to_date': 'yearToDate',
        'one_year': 'oneYear',
        'two_years': 'twoYears',
        'two_years_annualized': 'twoYearsAnnualized',
        'three_years': 'threeYears',
        'three_years_annualized': 'threeYearsAnnualized',
        'five_years': 'fiveYears',
        'five_years_annualized': 'fiveYearsAnnualized',
        'ten_years': 'tenYears',
        'ten_years_annualized': 'tenYearsAnnualized',
        'twenty_years': 'twentyYears',
        'twenty_years_annualized': 'twentyYearsAnnualized'
    }

    def __init__(self, one_day=None, one_week=None, two_weeks=None, one_month=None, three_months=None, six_months=None, year_to_date=None, one_year=None, two_years=None, two_years_annualized=None, three_years=None, three_years_annualized=None, five_years=None, five_years_annualized=None, ten_years=None, ten_years_annualized=None, twenty_years=None, twenty_years_annualized=None):  # noqa: E501
        """Performance - a model defined in Swagger"""  # noqa: E501
        self._one_day = None
        self._one_week = None
        self._two_weeks = None
        self._one_month = None
        self._three_months = None
        self._six_months = None
        self._year_to_date = None
        self._one_year = None
        self._two_years = None
        self._two_years_annualized = None
        self._three_years = None
        self._three_years_annualized = None
        self._five_years = None
        self._five_years_annualized = None
        self._ten_years = None
        self._ten_years_annualized = None
        self._twenty_years = None
        self._twenty_years_annualized = None
        self.discriminator = None
        if one_day is not None:
            self.one_day = one_day
        if one_week is not None:
            self.one_week = one_week
        if two_weeks is not None:
            self.two_weeks = two_weeks
        if one_month is not None:
            self.one_month = one_month
        if three_months is not None:
            self.three_months = three_months
        if six_months is not None:
            self.six_months = six_months
        if year_to_date is not None:
            self.year_to_date = year_to_date
        if one_year is not None:
            self.one_year = one_year
        if two_years is not None:
            self.two_years = two_years
        if two_years_annualized is not None:
            self.two_years_annualized = two_years_annualized
        if three_years is not None:
            self.three_years = three_years
        if three_years_annualized is not None:
            self.three_years_annualized = three_years_annualized
        if five_years is not None:
            self.five_years = five_years
        if five_years_annualized is not None:
            self.five_years_annualized = five_years_annualized
        if ten_years is not None:
            self.ten_years = ten_years
        if ten_years_annualized is not None:
            self.ten_years_annualized = ten_years_annualized
        if twenty_years is not None:
            self.twenty_years = twenty_years
        if twenty_years_annualized is not None:
            self.twenty_years_annualized = twenty_years_annualized

    @property
    def one_day(self):
        """Gets the one_day of this Performance.  # noqa: E501


        :return: The one_day of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._one_day

    @one_day.setter
    def one_day(self, one_day):
        """Sets the one_day of this Performance.


        :param one_day: The one_day of this Performance.  # noqa: E501
        :type: float
        """

        self._one_day = one_day

    @property
    def one_week(self):
        """Gets the one_week of this Performance.  # noqa: E501


        :return: The one_week of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._one_week

    @one_week.setter
    def one_week(self, one_week):
        """Sets the one_week of this Performance.


        :param one_week: The one_week of this Performance.  # noqa: E501
        :type: float
        """

        self._one_week = one_week

    @property
    def two_weeks(self):
        """Gets the two_weeks of this Performance.  # noqa: E501


        :return: The two_weeks of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._two_weeks

    @two_weeks.setter
    def two_weeks(self, two_weeks):
        """Sets the two_weeks of this Performance.


        :param two_weeks: The two_weeks of this Performance.  # noqa: E501
        :type: float
        """

        self._two_weeks = two_weeks

    @property
    def one_month(self):
        """Gets the one_month of this Performance.  # noqa: E501


        :return: The one_month of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._one_month

    @one_month.setter
    def one_month(self, one_month):
        """Sets the one_month of this Performance.


        :param one_month: The one_month of this Performance.  # noqa: E501
        :type: float
        """

        self._one_month = one_month

    @property
    def three_months(self):
        """Gets the three_months of this Performance.  # noqa: E501


        :return: The three_months of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._three_months

    @three_months.setter
    def three_months(self, three_months):
        """Sets the three_months of this Performance.


        :param three_months: The three_months of this Performance.  # noqa: E501
        :type: float
        """

        self._three_months = three_months

    @property
    def six_months(self):
        """Gets the six_months of this Performance.  # noqa: E501


        :return: The six_months of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._six_months

    @six_months.setter
    def six_months(self, six_months):
        """Sets the six_months of this Performance.


        :param six_months: The six_months of this Performance.  # noqa: E501
        :type: float
        """

        self._six_months = six_months

    @property
    def year_to_date(self):
        """Gets the year_to_date of this Performance.  # noqa: E501


        :return: The year_to_date of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._year_to_date

    @year_to_date.setter
    def year_to_date(self, year_to_date):
        """Sets the year_to_date of this Performance.


        :param year_to_date: The year_to_date of this Performance.  # noqa: E501
        :type: float
        """

        self._year_to_date = year_to_date

    @property
    def one_year(self):
        """Gets the one_year of this Performance.  # noqa: E501


        :return: The one_year of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._one_year

    @one_year.setter
    def one_year(self, one_year):
        """Sets the one_year of this Performance.


        :param one_year: The one_year of this Performance.  # noqa: E501
        :type: float
        """

        self._one_year = one_year

    @property
    def two_years(self):
        """Gets the two_years of this Performance.  # noqa: E501


        :return: The two_years of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._two_years

    @two_years.setter
    def two_years(self, two_years):
        """Sets the two_years of this Performance.


        :param two_years: The two_years of this Performance.  # noqa: E501
        :type: float
        """

        self._two_years = two_years

    @property
    def two_years_annualized(self):
        """Gets the two_years_annualized of this Performance.  # noqa: E501


        :return: The two_years_annualized of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._two_years_annualized

    @two_years_annualized.setter
    def two_years_annualized(self, two_years_annualized):
        """Sets the two_years_annualized of this Performance.


        :param two_years_annualized: The two_years_annualized of this Performance.  # noqa: E501
        :type: float
        """

        self._two_years_annualized = two_years_annualized

    @property
    def three_years(self):
        """Gets the three_years of this Performance.  # noqa: E501


        :return: The three_years of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._three_years

    @three_years.setter
    def three_years(self, three_years):
        """Sets the three_years of this Performance.


        :param three_years: The three_years of this Performance.  # noqa: E501
        :type: float
        """

        self._three_years = three_years

    @property
    def three_years_annualized(self):
        """Gets the three_years_annualized of this Performance.  # noqa: E501


        :return: The three_years_annualized of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._three_years_annualized

    @three_years_annualized.setter
    def three_years_annualized(self, three_years_annualized):
        """Sets the three_years_annualized of this Performance.


        :param three_years_annualized: The three_years_annualized of this Performance.  # noqa: E501
        :type: float
        """

        self._three_years_annualized = three_years_annualized

    @property
    def five_years(self):
        """Gets the five_years of this Performance.  # noqa: E501


        :return: The five_years of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._five_years

    @five_years.setter
    def five_years(self, five_years):
        """Sets the five_years of this Performance.


        :param five_years: The five_years of this Performance.  # noqa: E501
        :type: float
        """

        self._five_years = five_years

    @property
    def five_years_annualized(self):
        """Gets the five_years_annualized of this Performance.  # noqa: E501


        :return: The five_years_annualized of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._five_years_annualized

    @five_years_annualized.setter
    def five_years_annualized(self, five_years_annualized):
        """Sets the five_years_annualized of this Performance.


        :param five_years_annualized: The five_years_annualized of this Performance.  # noqa: E501
        :type: float
        """

        self._five_years_annualized = five_years_annualized

    @property
    def ten_years(self):
        """Gets the ten_years of this Performance.  # noqa: E501


        :return: The ten_years of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._ten_years

    @ten_years.setter
    def ten_years(self, ten_years):
        """Sets the ten_years of this Performance.


        :param ten_years: The ten_years of this Performance.  # noqa: E501
        :type: float
        """

        self._ten_years = ten_years

    @property
    def ten_years_annualized(self):
        """Gets the ten_years_annualized of this Performance.  # noqa: E501


        :return: The ten_years_annualized of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._ten_years_annualized

    @ten_years_annualized.setter
    def ten_years_annualized(self, ten_years_annualized):
        """Sets the ten_years_annualized of this Performance.


        :param ten_years_annualized: The ten_years_annualized of this Performance.  # noqa: E501
        :type: float
        """

        self._ten_years_annualized = ten_years_annualized

    @property
    def twenty_years(self):
        """Gets the twenty_years of this Performance.  # noqa: E501


        :return: The twenty_years of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._twenty_years

    @twenty_years.setter
    def twenty_years(self, twenty_years):
        """Sets the twenty_years of this Performance.


        :param twenty_years: The twenty_years of this Performance.  # noqa: E501
        :type: float
        """

        self._twenty_years = twenty_years

    @property
    def twenty_years_annualized(self):
        """Gets the twenty_years_annualized of this Performance.  # noqa: E501


        :return: The twenty_years_annualized of this Performance.  # noqa: E501
        :rtype: float
        """
        return self._twenty_years_annualized

    @twenty_years_annualized.setter
    def twenty_years_annualized(self, twenty_years_annualized):
        """Sets the twenty_years_annualized of this Performance.


        :param twenty_years_annualized: The twenty_years_annualized of this Performance.  # noqa: E501
        :type: float
        """

        self._twenty_years_annualized = twenty_years_annualized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Performance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Performance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
