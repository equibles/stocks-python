# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceSheet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'int',
        'tangible_assets': 'int',
        'current_assets': 'int',
        'cash_and_cash_equivalents': 'int',
        'cash_and_short_term_investments': 'int',
        'inventory': 'int',
        'current_net_receivables': 'int',
        'non_current_assets': 'int',
        'property_plant_equipment': 'int',
        'accumulated_depreciation_amortization': 'int',
        'intangible_assets': 'int',
        'intangible_assets_excluding_goodwill': 'int',
        'goodwill': 'int',
        'investments': 'int',
        'long_term_investments': 'int',
        'short_term_investments': 'int',
        'other_current_assets': 'int',
        'other_non_current_assets': 'int',
        'liabilities': 'int',
        'current_liabilities': 'int',
        'current_accounts_payable': 'int',
        'deferred_revenue': 'int',
        'current_debt': 'int',
        'short_term_debt': 'int',
        'non_current_liabilities': 'int',
        'capital_lease_obligations': 'int',
        'long_term_debt': 'int',
        'current_long_term_debt': 'int',
        'long_term_debt_non_current': 'int',
        'short_long_term_debt_total': 'int',
        'other_current_liabilities': 'int',
        'other_non_current_liabilities': 'int',
        'equity': 'int',
        'treasury_stock': 'int',
        'retained_earnings': 'int',
        'common_stock': 'int',
        'shares_outstanding': 'int',
        'accumulated_other_comprehensive_income': 'int',
        'working_capital': 'int'
    }

    attribute_map = {
        'assets': 'assets',
        'tangible_assets': 'tangibleAssets',
        'current_assets': 'currentAssets',
        'cash_and_cash_equivalents': 'cashAndCashEquivalents',
        'cash_and_short_term_investments': 'cashAndShortTermInvestments',
        'inventory': 'inventory',
        'current_net_receivables': 'currentNetReceivables',
        'non_current_assets': 'nonCurrentAssets',
        'property_plant_equipment': 'propertyPlantEquipment',
        'accumulated_depreciation_amortization': 'accumulatedDepreciationAmortization',
        'intangible_assets': 'intangibleAssets',
        'intangible_assets_excluding_goodwill': 'intangibleAssetsExcludingGoodwill',
        'goodwill': 'goodwill',
        'investments': 'investments',
        'long_term_investments': 'longTermInvestments',
        'short_term_investments': 'shortTermInvestments',
        'other_current_assets': 'otherCurrentAssets',
        'other_non_current_assets': 'otherNonCurrentAssets',
        'liabilities': 'liabilities',
        'current_liabilities': 'currentLiabilities',
        'current_accounts_payable': 'currentAccountsPayable',
        'deferred_revenue': 'deferredRevenue',
        'current_debt': 'currentDebt',
        'short_term_debt': 'shortTermDebt',
        'non_current_liabilities': 'nonCurrentLiabilities',
        'capital_lease_obligations': 'capitalLeaseObligations',
        'long_term_debt': 'longTermDebt',
        'current_long_term_debt': 'currentLongTermDebt',
        'long_term_debt_non_current': 'longTermDebtNonCurrent',
        'short_long_term_debt_total': 'shortLongTermDebtTotal',
        'other_current_liabilities': 'otherCurrentLiabilities',
        'other_non_current_liabilities': 'otherNonCurrentLiabilities',
        'equity': 'equity',
        'treasury_stock': 'treasuryStock',
        'retained_earnings': 'retainedEarnings',
        'common_stock': 'commonStock',
        'shares_outstanding': 'sharesOutstanding',
        'accumulated_other_comprehensive_income': 'accumulatedOtherComprehensiveIncome',
        'working_capital': 'workingCapital'
    }

    def __init__(self, assets=None, tangible_assets=None, current_assets=None, cash_and_cash_equivalents=None, cash_and_short_term_investments=None, inventory=None, current_net_receivables=None, non_current_assets=None, property_plant_equipment=None, accumulated_depreciation_amortization=None, intangible_assets=None, intangible_assets_excluding_goodwill=None, goodwill=None, investments=None, long_term_investments=None, short_term_investments=None, other_current_assets=None, other_non_current_assets=None, liabilities=None, current_liabilities=None, current_accounts_payable=None, deferred_revenue=None, current_debt=None, short_term_debt=None, non_current_liabilities=None, capital_lease_obligations=None, long_term_debt=None, current_long_term_debt=None, long_term_debt_non_current=None, short_long_term_debt_total=None, other_current_liabilities=None, other_non_current_liabilities=None, equity=None, treasury_stock=None, retained_earnings=None, common_stock=None, shares_outstanding=None, accumulated_other_comprehensive_income=None, working_capital=None):  # noqa: E501
        """BalanceSheet - a model defined in Swagger"""  # noqa: E501
        self._assets = None
        self._tangible_assets = None
        self._current_assets = None
        self._cash_and_cash_equivalents = None
        self._cash_and_short_term_investments = None
        self._inventory = None
        self._current_net_receivables = None
        self._non_current_assets = None
        self._property_plant_equipment = None
        self._accumulated_depreciation_amortization = None
        self._intangible_assets = None
        self._intangible_assets_excluding_goodwill = None
        self._goodwill = None
        self._investments = None
        self._long_term_investments = None
        self._short_term_investments = None
        self._other_current_assets = None
        self._other_non_current_assets = None
        self._liabilities = None
        self._current_liabilities = None
        self._current_accounts_payable = None
        self._deferred_revenue = None
        self._current_debt = None
        self._short_term_debt = None
        self._non_current_liabilities = None
        self._capital_lease_obligations = None
        self._long_term_debt = None
        self._current_long_term_debt = None
        self._long_term_debt_non_current = None
        self._short_long_term_debt_total = None
        self._other_current_liabilities = None
        self._other_non_current_liabilities = None
        self._equity = None
        self._treasury_stock = None
        self._retained_earnings = None
        self._common_stock = None
        self._shares_outstanding = None
        self._accumulated_other_comprehensive_income = None
        self._working_capital = None
        self.discriminator = None
        if assets is not None:
            self.assets = assets
        if tangible_assets is not None:
            self.tangible_assets = tangible_assets
        if current_assets is not None:
            self.current_assets = current_assets
        if cash_and_cash_equivalents is not None:
            self.cash_and_cash_equivalents = cash_and_cash_equivalents
        if cash_and_short_term_investments is not None:
            self.cash_and_short_term_investments = cash_and_short_term_investments
        if inventory is not None:
            self.inventory = inventory
        if current_net_receivables is not None:
            self.current_net_receivables = current_net_receivables
        if non_current_assets is not None:
            self.non_current_assets = non_current_assets
        if property_plant_equipment is not None:
            self.property_plant_equipment = property_plant_equipment
        if accumulated_depreciation_amortization is not None:
            self.accumulated_depreciation_amortization = accumulated_depreciation_amortization
        if intangible_assets is not None:
            self.intangible_assets = intangible_assets
        if intangible_assets_excluding_goodwill is not None:
            self.intangible_assets_excluding_goodwill = intangible_assets_excluding_goodwill
        if goodwill is not None:
            self.goodwill = goodwill
        if investments is not None:
            self.investments = investments
        if long_term_investments is not None:
            self.long_term_investments = long_term_investments
        if short_term_investments is not None:
            self.short_term_investments = short_term_investments
        if other_current_assets is not None:
            self.other_current_assets = other_current_assets
        if other_non_current_assets is not None:
            self.other_non_current_assets = other_non_current_assets
        if liabilities is not None:
            self.liabilities = liabilities
        if current_liabilities is not None:
            self.current_liabilities = current_liabilities
        if current_accounts_payable is not None:
            self.current_accounts_payable = current_accounts_payable
        if deferred_revenue is not None:
            self.deferred_revenue = deferred_revenue
        if current_debt is not None:
            self.current_debt = current_debt
        if short_term_debt is not None:
            self.short_term_debt = short_term_debt
        if non_current_liabilities is not None:
            self.non_current_liabilities = non_current_liabilities
        if capital_lease_obligations is not None:
            self.capital_lease_obligations = capital_lease_obligations
        if long_term_debt is not None:
            self.long_term_debt = long_term_debt
        if current_long_term_debt is not None:
            self.current_long_term_debt = current_long_term_debt
        if long_term_debt_non_current is not None:
            self.long_term_debt_non_current = long_term_debt_non_current
        if short_long_term_debt_total is not None:
            self.short_long_term_debt_total = short_long_term_debt_total
        if other_current_liabilities is not None:
            self.other_current_liabilities = other_current_liabilities
        if other_non_current_liabilities is not None:
            self.other_non_current_liabilities = other_non_current_liabilities
        if equity is not None:
            self.equity = equity
        if treasury_stock is not None:
            self.treasury_stock = treasury_stock
        if retained_earnings is not None:
            self.retained_earnings = retained_earnings
        if common_stock is not None:
            self.common_stock = common_stock
        if shares_outstanding is not None:
            self.shares_outstanding = shares_outstanding
        if accumulated_other_comprehensive_income is not None:
            self.accumulated_other_comprehensive_income = accumulated_other_comprehensive_income
        if working_capital is not None:
            self.working_capital = working_capital

    @property
    def assets(self):
        """Gets the assets of this BalanceSheet.  # noqa: E501


        :return: The assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this BalanceSheet.


        :param assets: The assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._assets = assets

    @property
    def tangible_assets(self):
        """Gets the tangible_assets of this BalanceSheet.  # noqa: E501


        :return: The tangible_assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._tangible_assets

    @tangible_assets.setter
    def tangible_assets(self, tangible_assets):
        """Sets the tangible_assets of this BalanceSheet.


        :param tangible_assets: The tangible_assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._tangible_assets = tangible_assets

    @property
    def current_assets(self):
        """Gets the current_assets of this BalanceSheet.  # noqa: E501


        :return: The current_assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._current_assets

    @current_assets.setter
    def current_assets(self, current_assets):
        """Sets the current_assets of this BalanceSheet.


        :param current_assets: The current_assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._current_assets = current_assets

    @property
    def cash_and_cash_equivalents(self):
        """Gets the cash_and_cash_equivalents of this BalanceSheet.  # noqa: E501


        :return: The cash_and_cash_equivalents of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._cash_and_cash_equivalents

    @cash_and_cash_equivalents.setter
    def cash_and_cash_equivalents(self, cash_and_cash_equivalents):
        """Sets the cash_and_cash_equivalents of this BalanceSheet.


        :param cash_and_cash_equivalents: The cash_and_cash_equivalents of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._cash_and_cash_equivalents = cash_and_cash_equivalents

    @property
    def cash_and_short_term_investments(self):
        """Gets the cash_and_short_term_investments of this BalanceSheet.  # noqa: E501


        :return: The cash_and_short_term_investments of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._cash_and_short_term_investments

    @cash_and_short_term_investments.setter
    def cash_and_short_term_investments(self, cash_and_short_term_investments):
        """Sets the cash_and_short_term_investments of this BalanceSheet.


        :param cash_and_short_term_investments: The cash_and_short_term_investments of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._cash_and_short_term_investments = cash_and_short_term_investments

    @property
    def inventory(self):
        """Gets the inventory of this BalanceSheet.  # noqa: E501


        :return: The inventory of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this BalanceSheet.


        :param inventory: The inventory of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._inventory = inventory

    @property
    def current_net_receivables(self):
        """Gets the current_net_receivables of this BalanceSheet.  # noqa: E501


        :return: The current_net_receivables of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._current_net_receivables

    @current_net_receivables.setter
    def current_net_receivables(self, current_net_receivables):
        """Sets the current_net_receivables of this BalanceSheet.


        :param current_net_receivables: The current_net_receivables of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._current_net_receivables = current_net_receivables

    @property
    def non_current_assets(self):
        """Gets the non_current_assets of this BalanceSheet.  # noqa: E501


        :return: The non_current_assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._non_current_assets

    @non_current_assets.setter
    def non_current_assets(self, non_current_assets):
        """Sets the non_current_assets of this BalanceSheet.


        :param non_current_assets: The non_current_assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._non_current_assets = non_current_assets

    @property
    def property_plant_equipment(self):
        """Gets the property_plant_equipment of this BalanceSheet.  # noqa: E501


        :return: The property_plant_equipment of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._property_plant_equipment

    @property_plant_equipment.setter
    def property_plant_equipment(self, property_plant_equipment):
        """Sets the property_plant_equipment of this BalanceSheet.


        :param property_plant_equipment: The property_plant_equipment of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._property_plant_equipment = property_plant_equipment

    @property
    def accumulated_depreciation_amortization(self):
        """Gets the accumulated_depreciation_amortization of this BalanceSheet.  # noqa: E501


        :return: The accumulated_depreciation_amortization of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._accumulated_depreciation_amortization

    @accumulated_depreciation_amortization.setter
    def accumulated_depreciation_amortization(self, accumulated_depreciation_amortization):
        """Sets the accumulated_depreciation_amortization of this BalanceSheet.


        :param accumulated_depreciation_amortization: The accumulated_depreciation_amortization of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._accumulated_depreciation_amortization = accumulated_depreciation_amortization

    @property
    def intangible_assets(self):
        """Gets the intangible_assets of this BalanceSheet.  # noqa: E501


        :return: The intangible_assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._intangible_assets

    @intangible_assets.setter
    def intangible_assets(self, intangible_assets):
        """Sets the intangible_assets of this BalanceSheet.


        :param intangible_assets: The intangible_assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._intangible_assets = intangible_assets

    @property
    def intangible_assets_excluding_goodwill(self):
        """Gets the intangible_assets_excluding_goodwill of this BalanceSheet.  # noqa: E501


        :return: The intangible_assets_excluding_goodwill of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._intangible_assets_excluding_goodwill

    @intangible_assets_excluding_goodwill.setter
    def intangible_assets_excluding_goodwill(self, intangible_assets_excluding_goodwill):
        """Sets the intangible_assets_excluding_goodwill of this BalanceSheet.


        :param intangible_assets_excluding_goodwill: The intangible_assets_excluding_goodwill of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._intangible_assets_excluding_goodwill = intangible_assets_excluding_goodwill

    @property
    def goodwill(self):
        """Gets the goodwill of this BalanceSheet.  # noqa: E501


        :return: The goodwill of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._goodwill

    @goodwill.setter
    def goodwill(self, goodwill):
        """Sets the goodwill of this BalanceSheet.


        :param goodwill: The goodwill of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._goodwill = goodwill

    @property
    def investments(self):
        """Gets the investments of this BalanceSheet.  # noqa: E501


        :return: The investments of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """Sets the investments of this BalanceSheet.


        :param investments: The investments of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._investments = investments

    @property
    def long_term_investments(self):
        """Gets the long_term_investments of this BalanceSheet.  # noqa: E501


        :return: The long_term_investments of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._long_term_investments

    @long_term_investments.setter
    def long_term_investments(self, long_term_investments):
        """Sets the long_term_investments of this BalanceSheet.


        :param long_term_investments: The long_term_investments of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._long_term_investments = long_term_investments

    @property
    def short_term_investments(self):
        """Gets the short_term_investments of this BalanceSheet.  # noqa: E501


        :return: The short_term_investments of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._short_term_investments

    @short_term_investments.setter
    def short_term_investments(self, short_term_investments):
        """Sets the short_term_investments of this BalanceSheet.


        :param short_term_investments: The short_term_investments of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._short_term_investments = short_term_investments

    @property
    def other_current_assets(self):
        """Gets the other_current_assets of this BalanceSheet.  # noqa: E501


        :return: The other_current_assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._other_current_assets

    @other_current_assets.setter
    def other_current_assets(self, other_current_assets):
        """Sets the other_current_assets of this BalanceSheet.


        :param other_current_assets: The other_current_assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._other_current_assets = other_current_assets

    @property
    def other_non_current_assets(self):
        """Gets the other_non_current_assets of this BalanceSheet.  # noqa: E501


        :return: The other_non_current_assets of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._other_non_current_assets

    @other_non_current_assets.setter
    def other_non_current_assets(self, other_non_current_assets):
        """Sets the other_non_current_assets of this BalanceSheet.


        :param other_non_current_assets: The other_non_current_assets of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._other_non_current_assets = other_non_current_assets

    @property
    def liabilities(self):
        """Gets the liabilities of this BalanceSheet.  # noqa: E501


        :return: The liabilities of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this BalanceSheet.


        :param liabilities: The liabilities of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._liabilities = liabilities

    @property
    def current_liabilities(self):
        """Gets the current_liabilities of this BalanceSheet.  # noqa: E501


        :return: The current_liabilities of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._current_liabilities

    @current_liabilities.setter
    def current_liabilities(self, current_liabilities):
        """Sets the current_liabilities of this BalanceSheet.


        :param current_liabilities: The current_liabilities of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._current_liabilities = current_liabilities

    @property
    def current_accounts_payable(self):
        """Gets the current_accounts_payable of this BalanceSheet.  # noqa: E501


        :return: The current_accounts_payable of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._current_accounts_payable

    @current_accounts_payable.setter
    def current_accounts_payable(self, current_accounts_payable):
        """Sets the current_accounts_payable of this BalanceSheet.


        :param current_accounts_payable: The current_accounts_payable of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._current_accounts_payable = current_accounts_payable

    @property
    def deferred_revenue(self):
        """Gets the deferred_revenue of this BalanceSheet.  # noqa: E501


        :return: The deferred_revenue of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._deferred_revenue

    @deferred_revenue.setter
    def deferred_revenue(self, deferred_revenue):
        """Sets the deferred_revenue of this BalanceSheet.


        :param deferred_revenue: The deferred_revenue of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._deferred_revenue = deferred_revenue

    @property
    def current_debt(self):
        """Gets the current_debt of this BalanceSheet.  # noqa: E501


        :return: The current_debt of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._current_debt

    @current_debt.setter
    def current_debt(self, current_debt):
        """Sets the current_debt of this BalanceSheet.


        :param current_debt: The current_debt of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._current_debt = current_debt

    @property
    def short_term_debt(self):
        """Gets the short_term_debt of this BalanceSheet.  # noqa: E501


        :return: The short_term_debt of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._short_term_debt

    @short_term_debt.setter
    def short_term_debt(self, short_term_debt):
        """Sets the short_term_debt of this BalanceSheet.


        :param short_term_debt: The short_term_debt of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._short_term_debt = short_term_debt

    @property
    def non_current_liabilities(self):
        """Gets the non_current_liabilities of this BalanceSheet.  # noqa: E501


        :return: The non_current_liabilities of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._non_current_liabilities

    @non_current_liabilities.setter
    def non_current_liabilities(self, non_current_liabilities):
        """Sets the non_current_liabilities of this BalanceSheet.


        :param non_current_liabilities: The non_current_liabilities of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._non_current_liabilities = non_current_liabilities

    @property
    def capital_lease_obligations(self):
        """Gets the capital_lease_obligations of this BalanceSheet.  # noqa: E501


        :return: The capital_lease_obligations of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._capital_lease_obligations

    @capital_lease_obligations.setter
    def capital_lease_obligations(self, capital_lease_obligations):
        """Sets the capital_lease_obligations of this BalanceSheet.


        :param capital_lease_obligations: The capital_lease_obligations of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._capital_lease_obligations = capital_lease_obligations

    @property
    def long_term_debt(self):
        """Gets the long_term_debt of this BalanceSheet.  # noqa: E501


        :return: The long_term_debt of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._long_term_debt

    @long_term_debt.setter
    def long_term_debt(self, long_term_debt):
        """Sets the long_term_debt of this BalanceSheet.


        :param long_term_debt: The long_term_debt of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._long_term_debt = long_term_debt

    @property
    def current_long_term_debt(self):
        """Gets the current_long_term_debt of this BalanceSheet.  # noqa: E501


        :return: The current_long_term_debt of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._current_long_term_debt

    @current_long_term_debt.setter
    def current_long_term_debt(self, current_long_term_debt):
        """Sets the current_long_term_debt of this BalanceSheet.


        :param current_long_term_debt: The current_long_term_debt of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._current_long_term_debt = current_long_term_debt

    @property
    def long_term_debt_non_current(self):
        """Gets the long_term_debt_non_current of this BalanceSheet.  # noqa: E501


        :return: The long_term_debt_non_current of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._long_term_debt_non_current

    @long_term_debt_non_current.setter
    def long_term_debt_non_current(self, long_term_debt_non_current):
        """Sets the long_term_debt_non_current of this BalanceSheet.


        :param long_term_debt_non_current: The long_term_debt_non_current of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._long_term_debt_non_current = long_term_debt_non_current

    @property
    def short_long_term_debt_total(self):
        """Gets the short_long_term_debt_total of this BalanceSheet.  # noqa: E501


        :return: The short_long_term_debt_total of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._short_long_term_debt_total

    @short_long_term_debt_total.setter
    def short_long_term_debt_total(self, short_long_term_debt_total):
        """Sets the short_long_term_debt_total of this BalanceSheet.


        :param short_long_term_debt_total: The short_long_term_debt_total of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._short_long_term_debt_total = short_long_term_debt_total

    @property
    def other_current_liabilities(self):
        """Gets the other_current_liabilities of this BalanceSheet.  # noqa: E501


        :return: The other_current_liabilities of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._other_current_liabilities

    @other_current_liabilities.setter
    def other_current_liabilities(self, other_current_liabilities):
        """Sets the other_current_liabilities of this BalanceSheet.


        :param other_current_liabilities: The other_current_liabilities of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._other_current_liabilities = other_current_liabilities

    @property
    def other_non_current_liabilities(self):
        """Gets the other_non_current_liabilities of this BalanceSheet.  # noqa: E501


        :return: The other_non_current_liabilities of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._other_non_current_liabilities

    @other_non_current_liabilities.setter
    def other_non_current_liabilities(self, other_non_current_liabilities):
        """Sets the other_non_current_liabilities of this BalanceSheet.


        :param other_non_current_liabilities: The other_non_current_liabilities of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._other_non_current_liabilities = other_non_current_liabilities

    @property
    def equity(self):
        """Gets the equity of this BalanceSheet.  # noqa: E501


        :return: The equity of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this BalanceSheet.


        :param equity: The equity of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._equity = equity

    @property
    def treasury_stock(self):
        """Gets the treasury_stock of this BalanceSheet.  # noqa: E501


        :return: The treasury_stock of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._treasury_stock

    @treasury_stock.setter
    def treasury_stock(self, treasury_stock):
        """Sets the treasury_stock of this BalanceSheet.


        :param treasury_stock: The treasury_stock of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._treasury_stock = treasury_stock

    @property
    def retained_earnings(self):
        """Gets the retained_earnings of this BalanceSheet.  # noqa: E501


        :return: The retained_earnings of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._retained_earnings

    @retained_earnings.setter
    def retained_earnings(self, retained_earnings):
        """Sets the retained_earnings of this BalanceSheet.


        :param retained_earnings: The retained_earnings of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._retained_earnings = retained_earnings

    @property
    def common_stock(self):
        """Gets the common_stock of this BalanceSheet.  # noqa: E501


        :return: The common_stock of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._common_stock

    @common_stock.setter
    def common_stock(self, common_stock):
        """Sets the common_stock of this BalanceSheet.


        :param common_stock: The common_stock of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._common_stock = common_stock

    @property
    def shares_outstanding(self):
        """Gets the shares_outstanding of this BalanceSheet.  # noqa: E501


        :return: The shares_outstanding of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._shares_outstanding

    @shares_outstanding.setter
    def shares_outstanding(self, shares_outstanding):
        """Sets the shares_outstanding of this BalanceSheet.


        :param shares_outstanding: The shares_outstanding of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._shares_outstanding = shares_outstanding

    @property
    def accumulated_other_comprehensive_income(self):
        """Gets the accumulated_other_comprehensive_income of this BalanceSheet.  # noqa: E501


        :return: The accumulated_other_comprehensive_income of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._accumulated_other_comprehensive_income

    @accumulated_other_comprehensive_income.setter
    def accumulated_other_comprehensive_income(self, accumulated_other_comprehensive_income):
        """Sets the accumulated_other_comprehensive_income of this BalanceSheet.


        :param accumulated_other_comprehensive_income: The accumulated_other_comprehensive_income of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._accumulated_other_comprehensive_income = accumulated_other_comprehensive_income

    @property
    def working_capital(self):
        """Gets the working_capital of this BalanceSheet.  # noqa: E501


        :return: The working_capital of this BalanceSheet.  # noqa: E501
        :rtype: int
        """
        return self._working_capital

    @working_capital.setter
    def working_capital(self, working_capital):
        """Sets the working_capital of this BalanceSheet.


        :param working_capital: The working_capital of this BalanceSheet.  # noqa: E501
        :type: int
        """

        self._working_capital = working_capital

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceSheet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceSheet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
