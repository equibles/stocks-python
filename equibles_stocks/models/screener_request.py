# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScreenerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_query': 'str',
        'exchange_ids': 'list[int]',
        'sector_ids': 'list[int]',
        'industry_ids': 'list[int]',
        'market_cap_min': 'float',
        'market_cap_max': 'float',
        'beta_min': 'float',
        'beta_max': 'float',
        'forward_dividend_min': 'float',
        'forward_dividend_max': 'float',
        'forward_dividend_yield_min': 'float',
        'forward_dividend_yield_max': 'float',
        'short_ratio_min': 'float',
        'short_ratio_max': 'float',
        'shares_short_percentage_min': 'float',
        'shares_short_percentage_max': 'float',
        'shares_short_previous_month_percentage_min': 'float',
        'shares_short_previous_month_percentage_max': 'float',
        'analyst_recommendation_min': 'Recommendation',
        'analyst_recommendation_max': 'Recommendation',
        'performance_one_day_min': 'float',
        'performance_one_day_max': 'float',
        'performance_one_week_min': 'float',
        'performance_one_week_max': 'float',
        'performance_two_weeks_min': 'float',
        'performance_two_weeks_max': 'float',
        'performance_one_month_min': 'float',
        'performance_one_month_max': 'float',
        'performance_three_months_min': 'float',
        'performance_three_months_max': 'float',
        'performance_one_year_min': 'float',
        'performance_one_year_max': 'float',
        'performance_three_years_min': 'float',
        'performance_three_years_max': 'float',
        'performance_five_years_min': 'float',
        'performance_five_years_max': 'float',
        'performance_ten_years_min': 'float',
        'performance_ten_years_max': 'float',
        'performance_twenty_years_min': 'float',
        'performance_twenty_years_max': 'float',
        'eps_growth_one_year_min': 'float',
        'eps_growth_one_year_max': 'float',
        'eps_growth_two_years_min': 'float',
        'eps_growth_two_years_max': 'float',
        'eps_growth_three_years_min': 'float',
        'eps_growth_three_years_max': 'float',
        'eps_growth_five_years_min': 'float',
        'eps_growth_five_years_max': 'float',
        'eps_growth_ten_years_min': 'float',
        'eps_growth_ten_years_max': 'float',
        'eps_growth_twenty_years_min': 'float',
        'eps_growth_twenty_years_max': 'float',
        'pe_min': 'float',
        'pe_max': 'float',
        'peg_min': 'float',
        'peg_max': 'float',
        'price_fcf_min': 'float',
        'price_fcf_max': 'float',
        'book_value_per_share_min': 'float',
        'book_value_per_share_max': 'float',
        'price_book_value_per_share_min': 'float',
        'price_book_value_per_share_max': 'float',
        'payout_min': 'float',
        'payout_max': 'float',
        'debt_to_equity_min': 'float',
        'debt_to_equity_max': 'float',
        'gross_margin_min': 'float',
        'gross_margin_max': 'float',
        'operating_margin_min': 'float',
        'operating_margin_max': 'float',
        'profit_margin_min': 'float',
        'profit_margin_max': 'float',
        'price_to_sales_min': 'float',
        'price_to_sales_max': 'float',
        'buybacks_three_months_min': 'float',
        'buybacks_three_months_max': 'float',
        'buybacks_six_months_min': 'float',
        'buybacks_six_months_max': 'float',
        'buybacks_one_year_min': 'float',
        'buybacks_one_year_max': 'float',
        'buybacks_two_years_min': 'float',
        'buybacks_two_years_max': 'float',
        'buybacks_three_years_min': 'float',
        'buybacks_three_years_max': 'float',
        'buybacks_five_years_min': 'float',
        'buybacks_five_years_max': 'float',
        'buybacks_ten_years_min': 'float',
        'buybacks_ten_years_max': 'float',
        'buybacks_twenty_years_min': 'float',
        'buybacks_twenty_years_max': 'float',
        'potential_upside': 'float'
    }

    attribute_map = {
        'search_query': 'searchQuery',
        'exchange_ids': 'exchangeIds',
        'sector_ids': 'sectorIds',
        'industry_ids': 'industryIds',
        'market_cap_min': 'marketCapMin',
        'market_cap_max': 'marketCapMax',
        'beta_min': 'betaMin',
        'beta_max': 'betaMax',
        'forward_dividend_min': 'forwardDividendMin',
        'forward_dividend_max': 'forwardDividendMax',
        'forward_dividend_yield_min': 'forwardDividendYieldMin',
        'forward_dividend_yield_max': 'forwardDividendYieldMax',
        'short_ratio_min': 'shortRatioMin',
        'short_ratio_max': 'shortRatioMax',
        'shares_short_percentage_min': 'sharesShortPercentageMin',
        'shares_short_percentage_max': 'sharesShortPercentageMax',
        'shares_short_previous_month_percentage_min': 'sharesShortPreviousMonthPercentageMin',
        'shares_short_previous_month_percentage_max': 'sharesShortPreviousMonthPercentageMax',
        'analyst_recommendation_min': 'analystRecommendationMin',
        'analyst_recommendation_max': 'analystRecommendationMax',
        'performance_one_day_min': 'performanceOneDayMin',
        'performance_one_day_max': 'performanceOneDayMax',
        'performance_one_week_min': 'performanceOneWeekMin',
        'performance_one_week_max': 'performanceOneWeekMax',
        'performance_two_weeks_min': 'performanceTwoWeeksMin',
        'performance_two_weeks_max': 'performanceTwoWeeksMax',
        'performance_one_month_min': 'performanceOneMonthMin',
        'performance_one_month_max': 'performanceOneMonthMax',
        'performance_three_months_min': 'performanceThreeMonthsMin',
        'performance_three_months_max': 'performanceThreeMonthsMax',
        'performance_one_year_min': 'performanceOneYearMin',
        'performance_one_year_max': 'performanceOneYearMax',
        'performance_three_years_min': 'performanceThreeYearsMin',
        'performance_three_years_max': 'performanceThreeYearsMax',
        'performance_five_years_min': 'performanceFiveYearsMin',
        'performance_five_years_max': 'performanceFiveYearsMax',
        'performance_ten_years_min': 'performanceTenYearsMin',
        'performance_ten_years_max': 'performanceTenYearsMax',
        'performance_twenty_years_min': 'performanceTwentyYearsMin',
        'performance_twenty_years_max': 'performanceTwentyYearsMax',
        'eps_growth_one_year_min': 'epsGrowthOneYearMin',
        'eps_growth_one_year_max': 'epsGrowthOneYearMax',
        'eps_growth_two_years_min': 'epsGrowthTwoYearsMin',
        'eps_growth_two_years_max': 'epsGrowthTwoYearsMax',
        'eps_growth_three_years_min': 'epsGrowthThreeYearsMin',
        'eps_growth_three_years_max': 'epsGrowthThreeYearsMax',
        'eps_growth_five_years_min': 'epsGrowthFiveYearsMin',
        'eps_growth_five_years_max': 'epsGrowthFiveYearsMax',
        'eps_growth_ten_years_min': 'epsGrowthTenYearsMin',
        'eps_growth_ten_years_max': 'epsGrowthTenYearsMax',
        'eps_growth_twenty_years_min': 'epsGrowthTwentyYearsMin',
        'eps_growth_twenty_years_max': 'epsGrowthTwentyYearsMax',
        'pe_min': 'peMin',
        'pe_max': 'peMax',
        'peg_min': 'pegMin',
        'peg_max': 'pegMax',
        'price_fcf_min': 'priceFcfMin',
        'price_fcf_max': 'priceFcfMax',
        'book_value_per_share_min': 'bookValuePerShareMin',
        'book_value_per_share_max': 'bookValuePerShareMax',
        'price_book_value_per_share_min': 'priceBookValuePerShareMin',
        'price_book_value_per_share_max': 'priceBookValuePerShareMax',
        'payout_min': 'payoutMin',
        'payout_max': 'payoutMax',
        'debt_to_equity_min': 'debtToEquityMin',
        'debt_to_equity_max': 'debtToEquityMax',
        'gross_margin_min': 'grossMarginMin',
        'gross_margin_max': 'grossMarginMax',
        'operating_margin_min': 'operatingMarginMin',
        'operating_margin_max': 'operatingMarginMax',
        'profit_margin_min': 'profitMarginMin',
        'profit_margin_max': 'profitMarginMax',
        'price_to_sales_min': 'priceToSalesMin',
        'price_to_sales_max': 'priceToSalesMax',
        'buybacks_three_months_min': 'buybacksThreeMonthsMin',
        'buybacks_three_months_max': 'buybacksThreeMonthsMax',
        'buybacks_six_months_min': 'buybacksSixMonthsMin',
        'buybacks_six_months_max': 'buybacksSixMonthsMax',
        'buybacks_one_year_min': 'buybacksOneYearMin',
        'buybacks_one_year_max': 'buybacksOneYearMax',
        'buybacks_two_years_min': 'buybacksTwoYearsMin',
        'buybacks_two_years_max': 'buybacksTwoYearsMax',
        'buybacks_three_years_min': 'buybacksThreeYearsMin',
        'buybacks_three_years_max': 'buybacksThreeYearsMax',
        'buybacks_five_years_min': 'buybacksFiveYearsMin',
        'buybacks_five_years_max': 'buybacksFiveYearsMax',
        'buybacks_ten_years_min': 'buybacksTenYearsMin',
        'buybacks_ten_years_max': 'buybacksTenYearsMax',
        'buybacks_twenty_years_min': 'buybacksTwentyYearsMin',
        'buybacks_twenty_years_max': 'buybacksTwentyYearsMax',
        'potential_upside': 'potentialUpside'
    }

    def __init__(self, search_query=None, exchange_ids=None, sector_ids=None, industry_ids=None, market_cap_min=None, market_cap_max=None, beta_min=None, beta_max=None, forward_dividend_min=None, forward_dividend_max=None, forward_dividend_yield_min=None, forward_dividend_yield_max=None, short_ratio_min=None, short_ratio_max=None, shares_short_percentage_min=None, shares_short_percentage_max=None, shares_short_previous_month_percentage_min=None, shares_short_previous_month_percentage_max=None, analyst_recommendation_min=None, analyst_recommendation_max=None, performance_one_day_min=None, performance_one_day_max=None, performance_one_week_min=None, performance_one_week_max=None, performance_two_weeks_min=None, performance_two_weeks_max=None, performance_one_month_min=None, performance_one_month_max=None, performance_three_months_min=None, performance_three_months_max=None, performance_one_year_min=None, performance_one_year_max=None, performance_three_years_min=None, performance_three_years_max=None, performance_five_years_min=None, performance_five_years_max=None, performance_ten_years_min=None, performance_ten_years_max=None, performance_twenty_years_min=None, performance_twenty_years_max=None, eps_growth_one_year_min=None, eps_growth_one_year_max=None, eps_growth_two_years_min=None, eps_growth_two_years_max=None, eps_growth_three_years_min=None, eps_growth_three_years_max=None, eps_growth_five_years_min=None, eps_growth_five_years_max=None, eps_growth_ten_years_min=None, eps_growth_ten_years_max=None, eps_growth_twenty_years_min=None, eps_growth_twenty_years_max=None, pe_min=None, pe_max=None, peg_min=None, peg_max=None, price_fcf_min=None, price_fcf_max=None, book_value_per_share_min=None, book_value_per_share_max=None, price_book_value_per_share_min=None, price_book_value_per_share_max=None, payout_min=None, payout_max=None, debt_to_equity_min=None, debt_to_equity_max=None, gross_margin_min=None, gross_margin_max=None, operating_margin_min=None, operating_margin_max=None, profit_margin_min=None, profit_margin_max=None, price_to_sales_min=None, price_to_sales_max=None, buybacks_three_months_min=None, buybacks_three_months_max=None, buybacks_six_months_min=None, buybacks_six_months_max=None, buybacks_one_year_min=None, buybacks_one_year_max=None, buybacks_two_years_min=None, buybacks_two_years_max=None, buybacks_three_years_min=None, buybacks_three_years_max=None, buybacks_five_years_min=None, buybacks_five_years_max=None, buybacks_ten_years_min=None, buybacks_ten_years_max=None, buybacks_twenty_years_min=None, buybacks_twenty_years_max=None, potential_upside=None):  # noqa: E501
        """ScreenerRequest - a model defined in Swagger"""  # noqa: E501
        self._search_query = None
        self._exchange_ids = None
        self._sector_ids = None
        self._industry_ids = None
        self._market_cap_min = None
        self._market_cap_max = None
        self._beta_min = None
        self._beta_max = None
        self._forward_dividend_min = None
        self._forward_dividend_max = None
        self._forward_dividend_yield_min = None
        self._forward_dividend_yield_max = None
        self._short_ratio_min = None
        self._short_ratio_max = None
        self._shares_short_percentage_min = None
        self._shares_short_percentage_max = None
        self._shares_short_previous_month_percentage_min = None
        self._shares_short_previous_month_percentage_max = None
        self._analyst_recommendation_min = None
        self._analyst_recommendation_max = None
        self._performance_one_day_min = None
        self._performance_one_day_max = None
        self._performance_one_week_min = None
        self._performance_one_week_max = None
        self._performance_two_weeks_min = None
        self._performance_two_weeks_max = None
        self._performance_one_month_min = None
        self._performance_one_month_max = None
        self._performance_three_months_min = None
        self._performance_three_months_max = None
        self._performance_one_year_min = None
        self._performance_one_year_max = None
        self._performance_three_years_min = None
        self._performance_three_years_max = None
        self._performance_five_years_min = None
        self._performance_five_years_max = None
        self._performance_ten_years_min = None
        self._performance_ten_years_max = None
        self._performance_twenty_years_min = None
        self._performance_twenty_years_max = None
        self._eps_growth_one_year_min = None
        self._eps_growth_one_year_max = None
        self._eps_growth_two_years_min = None
        self._eps_growth_two_years_max = None
        self._eps_growth_three_years_min = None
        self._eps_growth_three_years_max = None
        self._eps_growth_five_years_min = None
        self._eps_growth_five_years_max = None
        self._eps_growth_ten_years_min = None
        self._eps_growth_ten_years_max = None
        self._eps_growth_twenty_years_min = None
        self._eps_growth_twenty_years_max = None
        self._pe_min = None
        self._pe_max = None
        self._peg_min = None
        self._peg_max = None
        self._price_fcf_min = None
        self._price_fcf_max = None
        self._book_value_per_share_min = None
        self._book_value_per_share_max = None
        self._price_book_value_per_share_min = None
        self._price_book_value_per_share_max = None
        self._payout_min = None
        self._payout_max = None
        self._debt_to_equity_min = None
        self._debt_to_equity_max = None
        self._gross_margin_min = None
        self._gross_margin_max = None
        self._operating_margin_min = None
        self._operating_margin_max = None
        self._profit_margin_min = None
        self._profit_margin_max = None
        self._price_to_sales_min = None
        self._price_to_sales_max = None
        self._buybacks_three_months_min = None
        self._buybacks_three_months_max = None
        self._buybacks_six_months_min = None
        self._buybacks_six_months_max = None
        self._buybacks_one_year_min = None
        self._buybacks_one_year_max = None
        self._buybacks_two_years_min = None
        self._buybacks_two_years_max = None
        self._buybacks_three_years_min = None
        self._buybacks_three_years_max = None
        self._buybacks_five_years_min = None
        self._buybacks_five_years_max = None
        self._buybacks_ten_years_min = None
        self._buybacks_ten_years_max = None
        self._buybacks_twenty_years_min = None
        self._buybacks_twenty_years_max = None
        self._potential_upside = None
        self.discriminator = None
        if search_query is not None:
            self.search_query = search_query
        if exchange_ids is not None:
            self.exchange_ids = exchange_ids
        if sector_ids is not None:
            self.sector_ids = sector_ids
        if industry_ids is not None:
            self.industry_ids = industry_ids
        if market_cap_min is not None:
            self.market_cap_min = market_cap_min
        if market_cap_max is not None:
            self.market_cap_max = market_cap_max
        if beta_min is not None:
            self.beta_min = beta_min
        if beta_max is not None:
            self.beta_max = beta_max
        if forward_dividend_min is not None:
            self.forward_dividend_min = forward_dividend_min
        if forward_dividend_max is not None:
            self.forward_dividend_max = forward_dividend_max
        if forward_dividend_yield_min is not None:
            self.forward_dividend_yield_min = forward_dividend_yield_min
        if forward_dividend_yield_max is not None:
            self.forward_dividend_yield_max = forward_dividend_yield_max
        if short_ratio_min is not None:
            self.short_ratio_min = short_ratio_min
        if short_ratio_max is not None:
            self.short_ratio_max = short_ratio_max
        if shares_short_percentage_min is not None:
            self.shares_short_percentage_min = shares_short_percentage_min
        if shares_short_percentage_max is not None:
            self.shares_short_percentage_max = shares_short_percentage_max
        if shares_short_previous_month_percentage_min is not None:
            self.shares_short_previous_month_percentage_min = shares_short_previous_month_percentage_min
        if shares_short_previous_month_percentage_max is not None:
            self.shares_short_previous_month_percentage_max = shares_short_previous_month_percentage_max
        if analyst_recommendation_min is not None:
            self.analyst_recommendation_min = analyst_recommendation_min
        if analyst_recommendation_max is not None:
            self.analyst_recommendation_max = analyst_recommendation_max
        if performance_one_day_min is not None:
            self.performance_one_day_min = performance_one_day_min
        if performance_one_day_max is not None:
            self.performance_one_day_max = performance_one_day_max
        if performance_one_week_min is not None:
            self.performance_one_week_min = performance_one_week_min
        if performance_one_week_max is not None:
            self.performance_one_week_max = performance_one_week_max
        if performance_two_weeks_min is not None:
            self.performance_two_weeks_min = performance_two_weeks_min
        if performance_two_weeks_max is not None:
            self.performance_two_weeks_max = performance_two_weeks_max
        if performance_one_month_min is not None:
            self.performance_one_month_min = performance_one_month_min
        if performance_one_month_max is not None:
            self.performance_one_month_max = performance_one_month_max
        if performance_three_months_min is not None:
            self.performance_three_months_min = performance_three_months_min
        if performance_three_months_max is not None:
            self.performance_three_months_max = performance_three_months_max
        if performance_one_year_min is not None:
            self.performance_one_year_min = performance_one_year_min
        if performance_one_year_max is not None:
            self.performance_one_year_max = performance_one_year_max
        if performance_three_years_min is not None:
            self.performance_three_years_min = performance_three_years_min
        if performance_three_years_max is not None:
            self.performance_three_years_max = performance_three_years_max
        if performance_five_years_min is not None:
            self.performance_five_years_min = performance_five_years_min
        if performance_five_years_max is not None:
            self.performance_five_years_max = performance_five_years_max
        if performance_ten_years_min is not None:
            self.performance_ten_years_min = performance_ten_years_min
        if performance_ten_years_max is not None:
            self.performance_ten_years_max = performance_ten_years_max
        if performance_twenty_years_min is not None:
            self.performance_twenty_years_min = performance_twenty_years_min
        if performance_twenty_years_max is not None:
            self.performance_twenty_years_max = performance_twenty_years_max
        if eps_growth_one_year_min is not None:
            self.eps_growth_one_year_min = eps_growth_one_year_min
        if eps_growth_one_year_max is not None:
            self.eps_growth_one_year_max = eps_growth_one_year_max
        if eps_growth_two_years_min is not None:
            self.eps_growth_two_years_min = eps_growth_two_years_min
        if eps_growth_two_years_max is not None:
            self.eps_growth_two_years_max = eps_growth_two_years_max
        if eps_growth_three_years_min is not None:
            self.eps_growth_three_years_min = eps_growth_three_years_min
        if eps_growth_three_years_max is not None:
            self.eps_growth_three_years_max = eps_growth_three_years_max
        if eps_growth_five_years_min is not None:
            self.eps_growth_five_years_min = eps_growth_five_years_min
        if eps_growth_five_years_max is not None:
            self.eps_growth_five_years_max = eps_growth_five_years_max
        if eps_growth_ten_years_min is not None:
            self.eps_growth_ten_years_min = eps_growth_ten_years_min
        if eps_growth_ten_years_max is not None:
            self.eps_growth_ten_years_max = eps_growth_ten_years_max
        if eps_growth_twenty_years_min is not None:
            self.eps_growth_twenty_years_min = eps_growth_twenty_years_min
        if eps_growth_twenty_years_max is not None:
            self.eps_growth_twenty_years_max = eps_growth_twenty_years_max
        if pe_min is not None:
            self.pe_min = pe_min
        if pe_max is not None:
            self.pe_max = pe_max
        if peg_min is not None:
            self.peg_min = peg_min
        if peg_max is not None:
            self.peg_max = peg_max
        if price_fcf_min is not None:
            self.price_fcf_min = price_fcf_min
        if price_fcf_max is not None:
            self.price_fcf_max = price_fcf_max
        if book_value_per_share_min is not None:
            self.book_value_per_share_min = book_value_per_share_min
        if book_value_per_share_max is not None:
            self.book_value_per_share_max = book_value_per_share_max
        if price_book_value_per_share_min is not None:
            self.price_book_value_per_share_min = price_book_value_per_share_min
        if price_book_value_per_share_max is not None:
            self.price_book_value_per_share_max = price_book_value_per_share_max
        if payout_min is not None:
            self.payout_min = payout_min
        if payout_max is not None:
            self.payout_max = payout_max
        if debt_to_equity_min is not None:
            self.debt_to_equity_min = debt_to_equity_min
        if debt_to_equity_max is not None:
            self.debt_to_equity_max = debt_to_equity_max
        if gross_margin_min is not None:
            self.gross_margin_min = gross_margin_min
        if gross_margin_max is not None:
            self.gross_margin_max = gross_margin_max
        if operating_margin_min is not None:
            self.operating_margin_min = operating_margin_min
        if operating_margin_max is not None:
            self.operating_margin_max = operating_margin_max
        if profit_margin_min is not None:
            self.profit_margin_min = profit_margin_min
        if profit_margin_max is not None:
            self.profit_margin_max = profit_margin_max
        if price_to_sales_min is not None:
            self.price_to_sales_min = price_to_sales_min
        if price_to_sales_max is not None:
            self.price_to_sales_max = price_to_sales_max
        if buybacks_three_months_min is not None:
            self.buybacks_three_months_min = buybacks_three_months_min
        if buybacks_three_months_max is not None:
            self.buybacks_three_months_max = buybacks_three_months_max
        if buybacks_six_months_min is not None:
            self.buybacks_six_months_min = buybacks_six_months_min
        if buybacks_six_months_max is not None:
            self.buybacks_six_months_max = buybacks_six_months_max
        if buybacks_one_year_min is not None:
            self.buybacks_one_year_min = buybacks_one_year_min
        if buybacks_one_year_max is not None:
            self.buybacks_one_year_max = buybacks_one_year_max
        if buybacks_two_years_min is not None:
            self.buybacks_two_years_min = buybacks_two_years_min
        if buybacks_two_years_max is not None:
            self.buybacks_two_years_max = buybacks_two_years_max
        if buybacks_three_years_min is not None:
            self.buybacks_three_years_min = buybacks_three_years_min
        if buybacks_three_years_max is not None:
            self.buybacks_three_years_max = buybacks_three_years_max
        if buybacks_five_years_min is not None:
            self.buybacks_five_years_min = buybacks_five_years_min
        if buybacks_five_years_max is not None:
            self.buybacks_five_years_max = buybacks_five_years_max
        if buybacks_ten_years_min is not None:
            self.buybacks_ten_years_min = buybacks_ten_years_min
        if buybacks_ten_years_max is not None:
            self.buybacks_ten_years_max = buybacks_ten_years_max
        if buybacks_twenty_years_min is not None:
            self.buybacks_twenty_years_min = buybacks_twenty_years_min
        if buybacks_twenty_years_max is not None:
            self.buybacks_twenty_years_max = buybacks_twenty_years_max
        if potential_upside is not None:
            self.potential_upside = potential_upside

    @property
    def search_query(self):
        """Gets the search_query of this ScreenerRequest.  # noqa: E501

        A textual search term.  # noqa: E501

        :return: The search_query of this ScreenerRequest.  # noqa: E501
        :rtype: str
        """
        return self._search_query

    @search_query.setter
    def search_query(self, search_query):
        """Sets the search_query of this ScreenerRequest.

        A textual search term.  # noqa: E501

        :param search_query: The search_query of this ScreenerRequest.  # noqa: E501
        :type: str
        """

        self._search_query = search_query

    @property
    def exchange_ids(self):
        """Gets the exchange_ids of this ScreenerRequest.  # noqa: E501

        The ids of the exchanges to use.  # noqa: E501

        :return: The exchange_ids of this ScreenerRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._exchange_ids

    @exchange_ids.setter
    def exchange_ids(self, exchange_ids):
        """Sets the exchange_ids of this ScreenerRequest.

        The ids of the exchanges to use.  # noqa: E501

        :param exchange_ids: The exchange_ids of this ScreenerRequest.  # noqa: E501
        :type: list[int]
        """

        self._exchange_ids = exchange_ids

    @property
    def sector_ids(self):
        """Gets the sector_ids of this ScreenerRequest.  # noqa: E501

        The ids of the sectors to use.  # noqa: E501

        :return: The sector_ids of this ScreenerRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._sector_ids

    @sector_ids.setter
    def sector_ids(self, sector_ids):
        """Sets the sector_ids of this ScreenerRequest.

        The ids of the sectors to use.  # noqa: E501

        :param sector_ids: The sector_ids of this ScreenerRequest.  # noqa: E501
        :type: list[int]
        """

        self._sector_ids = sector_ids

    @property
    def industry_ids(self):
        """Gets the industry_ids of this ScreenerRequest.  # noqa: E501

        The ids of the industries to use.  # noqa: E501

        :return: The industry_ids of this ScreenerRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._industry_ids

    @industry_ids.setter
    def industry_ids(self, industry_ids):
        """Sets the industry_ids of this ScreenerRequest.

        The ids of the industries to use.  # noqa: E501

        :param industry_ids: The industry_ids of this ScreenerRequest.  # noqa: E501
        :type: list[int]
        """

        self._industry_ids = industry_ids

    @property
    def market_cap_min(self):
        """Gets the market_cap_min of this ScreenerRequest.  # noqa: E501

        The minimum market capitalization.  # noqa: E501

        :return: The market_cap_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._market_cap_min

    @market_cap_min.setter
    def market_cap_min(self, market_cap_min):
        """Sets the market_cap_min of this ScreenerRequest.

        The minimum market capitalization.  # noqa: E501

        :param market_cap_min: The market_cap_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._market_cap_min = market_cap_min

    @property
    def market_cap_max(self):
        """Gets the market_cap_max of this ScreenerRequest.  # noqa: E501

        The maximum market capitalization.  # noqa: E501

        :return: The market_cap_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._market_cap_max

    @market_cap_max.setter
    def market_cap_max(self, market_cap_max):
        """Sets the market_cap_max of this ScreenerRequest.

        The maximum market capitalization.  # noqa: E501

        :param market_cap_max: The market_cap_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._market_cap_max = market_cap_max

    @property
    def beta_min(self):
        """Gets the beta_min of this ScreenerRequest.  # noqa: E501

        The minimum price beta for a 5 year period calculated monthly.  # noqa: E501

        :return: The beta_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._beta_min

    @beta_min.setter
    def beta_min(self, beta_min):
        """Sets the beta_min of this ScreenerRequest.

        The minimum price beta for a 5 year period calculated monthly.  # noqa: E501

        :param beta_min: The beta_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._beta_min = beta_min

    @property
    def beta_max(self):
        """Gets the beta_max of this ScreenerRequest.  # noqa: E501

        The maximum price beta for a 5 year period calculated monthly.  # noqa: E501

        :return: The beta_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._beta_max

    @beta_max.setter
    def beta_max(self, beta_max):
        """Sets the beta_max of this ScreenerRequest.

        The maximum price beta for a 5 year period calculated monthly.  # noqa: E501

        :param beta_max: The beta_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._beta_max = beta_max

    @property
    def forward_dividend_min(self):
        """Gets the forward_dividend_min of this ScreenerRequest.  # noqa: E501

        The minimum current dividend value.  # noqa: E501

        :return: The forward_dividend_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._forward_dividend_min

    @forward_dividend_min.setter
    def forward_dividend_min(self, forward_dividend_min):
        """Sets the forward_dividend_min of this ScreenerRequest.

        The minimum current dividend value.  # noqa: E501

        :param forward_dividend_min: The forward_dividend_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._forward_dividend_min = forward_dividend_min

    @property
    def forward_dividend_max(self):
        """Gets the forward_dividend_max of this ScreenerRequest.  # noqa: E501

        The maximum current dividend value.  # noqa: E501

        :return: The forward_dividend_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._forward_dividend_max

    @forward_dividend_max.setter
    def forward_dividend_max(self, forward_dividend_max):
        """Sets the forward_dividend_max of this ScreenerRequest.

        The maximum current dividend value.  # noqa: E501

        :param forward_dividend_max: The forward_dividend_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._forward_dividend_max = forward_dividend_max

    @property
    def forward_dividend_yield_min(self):
        """Gets the forward_dividend_yield_min of this ScreenerRequest.  # noqa: E501

        The minimum current dividend percentage.  # noqa: E501

        :return: The forward_dividend_yield_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._forward_dividend_yield_min

    @forward_dividend_yield_min.setter
    def forward_dividend_yield_min(self, forward_dividend_yield_min):
        """Sets the forward_dividend_yield_min of this ScreenerRequest.

        The minimum current dividend percentage.  # noqa: E501

        :param forward_dividend_yield_min: The forward_dividend_yield_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._forward_dividend_yield_min = forward_dividend_yield_min

    @property
    def forward_dividend_yield_max(self):
        """Gets the forward_dividend_yield_max of this ScreenerRequest.  # noqa: E501

        The maximum current dividend percentage.  # noqa: E501

        :return: The forward_dividend_yield_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._forward_dividend_yield_max

    @forward_dividend_yield_max.setter
    def forward_dividend_yield_max(self, forward_dividend_yield_max):
        """Sets the forward_dividend_yield_max of this ScreenerRequest.

        The maximum current dividend percentage.  # noqa: E501

        :param forward_dividend_yield_max: The forward_dividend_yield_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._forward_dividend_yield_max = forward_dividend_yield_max

    @property
    def short_ratio_min(self):
        """Gets the short_ratio_min of this ScreenerRequest.  # noqa: E501

        The minimum short ratio.  # noqa: E501

        :return: The short_ratio_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._short_ratio_min

    @short_ratio_min.setter
    def short_ratio_min(self, short_ratio_min):
        """Sets the short_ratio_min of this ScreenerRequest.

        The minimum short ratio.  # noqa: E501

        :param short_ratio_min: The short_ratio_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._short_ratio_min = short_ratio_min

    @property
    def short_ratio_max(self):
        """Gets the short_ratio_max of this ScreenerRequest.  # noqa: E501

        The maximum short ratio.  # noqa: E501

        :return: The short_ratio_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._short_ratio_max

    @short_ratio_max.setter
    def short_ratio_max(self, short_ratio_max):
        """Sets the short_ratio_max of this ScreenerRequest.

        The maximum short ratio.  # noqa: E501

        :param short_ratio_max: The short_ratio_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._short_ratio_max = short_ratio_max

    @property
    def shares_short_percentage_min(self):
        """Gets the shares_short_percentage_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares short.  # noqa: E501

        :return: The shares_short_percentage_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._shares_short_percentage_min

    @shares_short_percentage_min.setter
    def shares_short_percentage_min(self, shares_short_percentage_min):
        """Sets the shares_short_percentage_min of this ScreenerRequest.

        The minimum percentage of shares short.  # noqa: E501

        :param shares_short_percentage_min: The shares_short_percentage_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._shares_short_percentage_min = shares_short_percentage_min

    @property
    def shares_short_percentage_max(self):
        """Gets the shares_short_percentage_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares short.  # noqa: E501

        :return: The shares_short_percentage_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._shares_short_percentage_max

    @shares_short_percentage_max.setter
    def shares_short_percentage_max(self, shares_short_percentage_max):
        """Sets the shares_short_percentage_max of this ScreenerRequest.

        The maximum percentage of shares short.  # noqa: E501

        :param shares_short_percentage_max: The shares_short_percentage_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._shares_short_percentage_max = shares_short_percentage_max

    @property
    def shares_short_previous_month_percentage_min(self):
        """Gets the shares_short_previous_month_percentage_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares short on the last month.  # noqa: E501

        :return: The shares_short_previous_month_percentage_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._shares_short_previous_month_percentage_min

    @shares_short_previous_month_percentage_min.setter
    def shares_short_previous_month_percentage_min(self, shares_short_previous_month_percentage_min):
        """Sets the shares_short_previous_month_percentage_min of this ScreenerRequest.

        The minimum percentage of shares short on the last month.  # noqa: E501

        :param shares_short_previous_month_percentage_min: The shares_short_previous_month_percentage_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._shares_short_previous_month_percentage_min = shares_short_previous_month_percentage_min

    @property
    def shares_short_previous_month_percentage_max(self):
        """Gets the shares_short_previous_month_percentage_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares short on the last month.  # noqa: E501

        :return: The shares_short_previous_month_percentage_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._shares_short_previous_month_percentage_max

    @shares_short_previous_month_percentage_max.setter
    def shares_short_previous_month_percentage_max(self, shares_short_previous_month_percentage_max):
        """Sets the shares_short_previous_month_percentage_max of this ScreenerRequest.

        The maximum percentage of shares short on the last month.  # noqa: E501

        :param shares_short_previous_month_percentage_max: The shares_short_previous_month_percentage_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._shares_short_previous_month_percentage_max = shares_short_previous_month_percentage_max

    @property
    def analyst_recommendation_min(self):
        """Gets the analyst_recommendation_min of this ScreenerRequest.  # noqa: E501


        :return: The analyst_recommendation_min of this ScreenerRequest.  # noqa: E501
        :rtype: Recommendation
        """
        return self._analyst_recommendation_min

    @analyst_recommendation_min.setter
    def analyst_recommendation_min(self, analyst_recommendation_min):
        """Sets the analyst_recommendation_min of this ScreenerRequest.


        :param analyst_recommendation_min: The analyst_recommendation_min of this ScreenerRequest.  # noqa: E501
        :type: Recommendation
        """

        self._analyst_recommendation_min = analyst_recommendation_min

    @property
    def analyst_recommendation_max(self):
        """Gets the analyst_recommendation_max of this ScreenerRequest.  # noqa: E501


        :return: The analyst_recommendation_max of this ScreenerRequest.  # noqa: E501
        :rtype: Recommendation
        """
        return self._analyst_recommendation_max

    @analyst_recommendation_max.setter
    def analyst_recommendation_max(self, analyst_recommendation_max):
        """Sets the analyst_recommendation_max of this ScreenerRequest.


        :param analyst_recommendation_max: The analyst_recommendation_max of this ScreenerRequest.  # noqa: E501
        :type: Recommendation
        """

        self._analyst_recommendation_max = analyst_recommendation_max

    @property
    def performance_one_day_min(self):
        """Gets the performance_one_day_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last day.  # noqa: E501

        :return: The performance_one_day_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_day_min

    @performance_one_day_min.setter
    def performance_one_day_min(self, performance_one_day_min):
        """Sets the performance_one_day_min of this ScreenerRequest.

        The minimum stock price percentage change in the last day.  # noqa: E501

        :param performance_one_day_min: The performance_one_day_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_day_min = performance_one_day_min

    @property
    def performance_one_day_max(self):
        """Gets the performance_one_day_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last day.  # noqa: E501

        :return: The performance_one_day_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_day_max

    @performance_one_day_max.setter
    def performance_one_day_max(self, performance_one_day_max):
        """Sets the performance_one_day_max of this ScreenerRequest.

        The maximum stock price percentage change in the last day.  # noqa: E501

        :param performance_one_day_max: The performance_one_day_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_day_max = performance_one_day_max

    @property
    def performance_one_week_min(self):
        """Gets the performance_one_week_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last week.  # noqa: E501

        :return: The performance_one_week_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_week_min

    @performance_one_week_min.setter
    def performance_one_week_min(self, performance_one_week_min):
        """Sets the performance_one_week_min of this ScreenerRequest.

        The minimum stock price percentage change in the last week.  # noqa: E501

        :param performance_one_week_min: The performance_one_week_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_week_min = performance_one_week_min

    @property
    def performance_one_week_max(self):
        """Gets the performance_one_week_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last week.  # noqa: E501

        :return: The performance_one_week_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_week_max

    @performance_one_week_max.setter
    def performance_one_week_max(self, performance_one_week_max):
        """Sets the performance_one_week_max of this ScreenerRequest.

        The maximum stock price percentage change in the last week.  # noqa: E501

        :param performance_one_week_max: The performance_one_week_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_week_max = performance_one_week_max

    @property
    def performance_two_weeks_min(self):
        """Gets the performance_two_weeks_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last two weeks.  # noqa: E501

        :return: The performance_two_weeks_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_two_weeks_min

    @performance_two_weeks_min.setter
    def performance_two_weeks_min(self, performance_two_weeks_min):
        """Sets the performance_two_weeks_min of this ScreenerRequest.

        The minimum stock price percentage change in the last two weeks.  # noqa: E501

        :param performance_two_weeks_min: The performance_two_weeks_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_two_weeks_min = performance_two_weeks_min

    @property
    def performance_two_weeks_max(self):
        """Gets the performance_two_weeks_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last two weeks.  # noqa: E501

        :return: The performance_two_weeks_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_two_weeks_max

    @performance_two_weeks_max.setter
    def performance_two_weeks_max(self, performance_two_weeks_max):
        """Sets the performance_two_weeks_max of this ScreenerRequest.

        The maximum stock price percentage change in the last two weeks.  # noqa: E501

        :param performance_two_weeks_max: The performance_two_weeks_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_two_weeks_max = performance_two_weeks_max

    @property
    def performance_one_month_min(self):
        """Gets the performance_one_month_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last month.  # noqa: E501

        :return: The performance_one_month_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_month_min

    @performance_one_month_min.setter
    def performance_one_month_min(self, performance_one_month_min):
        """Sets the performance_one_month_min of this ScreenerRequest.

        The minimum stock price percentage change in the last month.  # noqa: E501

        :param performance_one_month_min: The performance_one_month_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_month_min = performance_one_month_min

    @property
    def performance_one_month_max(self):
        """Gets the performance_one_month_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last month.  # noqa: E501

        :return: The performance_one_month_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_month_max

    @performance_one_month_max.setter
    def performance_one_month_max(self, performance_one_month_max):
        """Sets the performance_one_month_max of this ScreenerRequest.

        The maximum stock price percentage change in the last month.  # noqa: E501

        :param performance_one_month_max: The performance_one_month_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_month_max = performance_one_month_max

    @property
    def performance_three_months_min(self):
        """Gets the performance_three_months_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last three months.  # noqa: E501

        :return: The performance_three_months_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_three_months_min

    @performance_three_months_min.setter
    def performance_three_months_min(self, performance_three_months_min):
        """Sets the performance_three_months_min of this ScreenerRequest.

        The minimum stock price percentage change in the last three months.  # noqa: E501

        :param performance_three_months_min: The performance_three_months_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_three_months_min = performance_three_months_min

    @property
    def performance_three_months_max(self):
        """Gets the performance_three_months_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last three months.  # noqa: E501

        :return: The performance_three_months_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_three_months_max

    @performance_three_months_max.setter
    def performance_three_months_max(self, performance_three_months_max):
        """Sets the performance_three_months_max of this ScreenerRequest.

        The maximum stock price percentage change in the last three months.  # noqa: E501

        :param performance_three_months_max: The performance_three_months_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_three_months_max = performance_three_months_max

    @property
    def performance_one_year_min(self):
        """Gets the performance_one_year_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last year.  # noqa: E501

        :return: The performance_one_year_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_year_min

    @performance_one_year_min.setter
    def performance_one_year_min(self, performance_one_year_min):
        """Sets the performance_one_year_min of this ScreenerRequest.

        The minimum stock price percentage change in the last year.  # noqa: E501

        :param performance_one_year_min: The performance_one_year_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_year_min = performance_one_year_min

    @property
    def performance_one_year_max(self):
        """Gets the performance_one_year_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last year.  # noqa: E501

        :return: The performance_one_year_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_one_year_max

    @performance_one_year_max.setter
    def performance_one_year_max(self, performance_one_year_max):
        """Sets the performance_one_year_max of this ScreenerRequest.

        The maximum stock price percentage change in the last year.  # noqa: E501

        :param performance_one_year_max: The performance_one_year_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_one_year_max = performance_one_year_max

    @property
    def performance_three_years_min(self):
        """Gets the performance_three_years_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last three years.  # noqa: E501

        :return: The performance_three_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_three_years_min

    @performance_three_years_min.setter
    def performance_three_years_min(self, performance_three_years_min):
        """Sets the performance_three_years_min of this ScreenerRequest.

        The minimum stock price percentage change in the last three years.  # noqa: E501

        :param performance_three_years_min: The performance_three_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_three_years_min = performance_three_years_min

    @property
    def performance_three_years_max(self):
        """Gets the performance_three_years_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last three years.  # noqa: E501

        :return: The performance_three_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_three_years_max

    @performance_three_years_max.setter
    def performance_three_years_max(self, performance_three_years_max):
        """Sets the performance_three_years_max of this ScreenerRequest.

        The maximum stock price percentage change in the last three years.  # noqa: E501

        :param performance_three_years_max: The performance_three_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_three_years_max = performance_three_years_max

    @property
    def performance_five_years_min(self):
        """Gets the performance_five_years_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last five years.  # noqa: E501

        :return: The performance_five_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_five_years_min

    @performance_five_years_min.setter
    def performance_five_years_min(self, performance_five_years_min):
        """Sets the performance_five_years_min of this ScreenerRequest.

        The minimum stock price percentage change in the last five years.  # noqa: E501

        :param performance_five_years_min: The performance_five_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_five_years_min = performance_five_years_min

    @property
    def performance_five_years_max(self):
        """Gets the performance_five_years_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last five years.  # noqa: E501

        :return: The performance_five_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_five_years_max

    @performance_five_years_max.setter
    def performance_five_years_max(self, performance_five_years_max):
        """Sets the performance_five_years_max of this ScreenerRequest.

        The maximum stock price percentage change in the last five years.  # noqa: E501

        :param performance_five_years_max: The performance_five_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_five_years_max = performance_five_years_max

    @property
    def performance_ten_years_min(self):
        """Gets the performance_ten_years_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last ten years.  # noqa: E501

        :return: The performance_ten_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_ten_years_min

    @performance_ten_years_min.setter
    def performance_ten_years_min(self, performance_ten_years_min):
        """Sets the performance_ten_years_min of this ScreenerRequest.

        The minimum stock price percentage change in the last ten years.  # noqa: E501

        :param performance_ten_years_min: The performance_ten_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_ten_years_min = performance_ten_years_min

    @property
    def performance_ten_years_max(self):
        """Gets the performance_ten_years_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last ten years.  # noqa: E501

        :return: The performance_ten_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_ten_years_max

    @performance_ten_years_max.setter
    def performance_ten_years_max(self, performance_ten_years_max):
        """Sets the performance_ten_years_max of this ScreenerRequest.

        The maximum stock price percentage change in the last ten years.  # noqa: E501

        :param performance_ten_years_max: The performance_ten_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_ten_years_max = performance_ten_years_max

    @property
    def performance_twenty_years_min(self):
        """Gets the performance_twenty_years_min of this ScreenerRequest.  # noqa: E501

        The minimum stock price percentage change in the last twenty years.  # noqa: E501

        :return: The performance_twenty_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_twenty_years_min

    @performance_twenty_years_min.setter
    def performance_twenty_years_min(self, performance_twenty_years_min):
        """Sets the performance_twenty_years_min of this ScreenerRequest.

        The minimum stock price percentage change in the last twenty years.  # noqa: E501

        :param performance_twenty_years_min: The performance_twenty_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_twenty_years_min = performance_twenty_years_min

    @property
    def performance_twenty_years_max(self):
        """Gets the performance_twenty_years_max of this ScreenerRequest.  # noqa: E501

        The maximum stock price percentage change in the last twenty years.  # noqa: E501

        :return: The performance_twenty_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._performance_twenty_years_max

    @performance_twenty_years_max.setter
    def performance_twenty_years_max(self, performance_twenty_years_max):
        """Sets the performance_twenty_years_max of this ScreenerRequest.

        The maximum stock price percentage change in the last twenty years.  # noqa: E501

        :param performance_twenty_years_max: The performance_twenty_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._performance_twenty_years_max = performance_twenty_years_max

    @property
    def eps_growth_one_year_min(self):
        """Gets the eps_growth_one_year_min of this ScreenerRequest.  # noqa: E501

        The minimum EPS growth in the last year.  # noqa: E501

        :return: The eps_growth_one_year_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_one_year_min

    @eps_growth_one_year_min.setter
    def eps_growth_one_year_min(self, eps_growth_one_year_min):
        """Sets the eps_growth_one_year_min of this ScreenerRequest.

        The minimum EPS growth in the last year.  # noqa: E501

        :param eps_growth_one_year_min: The eps_growth_one_year_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_one_year_min = eps_growth_one_year_min

    @property
    def eps_growth_one_year_max(self):
        """Gets the eps_growth_one_year_max of this ScreenerRequest.  # noqa: E501

        The maximum EPS growth in the last year.  # noqa: E501

        :return: The eps_growth_one_year_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_one_year_max

    @eps_growth_one_year_max.setter
    def eps_growth_one_year_max(self, eps_growth_one_year_max):
        """Sets the eps_growth_one_year_max of this ScreenerRequest.

        The maximum EPS growth in the last year.  # noqa: E501

        :param eps_growth_one_year_max: The eps_growth_one_year_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_one_year_max = eps_growth_one_year_max

    @property
    def eps_growth_two_years_min(self):
        """Gets the eps_growth_two_years_min of this ScreenerRequest.  # noqa: E501

        The minimum EPS growth in the last two years. This value is annualized.  # noqa: E501

        :return: The eps_growth_two_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_two_years_min

    @eps_growth_two_years_min.setter
    def eps_growth_two_years_min(self, eps_growth_two_years_min):
        """Sets the eps_growth_two_years_min of this ScreenerRequest.

        The minimum EPS growth in the last two years. This value is annualized.  # noqa: E501

        :param eps_growth_two_years_min: The eps_growth_two_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_two_years_min = eps_growth_two_years_min

    @property
    def eps_growth_two_years_max(self):
        """Gets the eps_growth_two_years_max of this ScreenerRequest.  # noqa: E501

        The maximum EPS growth in the last two years. This value is annualized.  # noqa: E501

        :return: The eps_growth_two_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_two_years_max

    @eps_growth_two_years_max.setter
    def eps_growth_two_years_max(self, eps_growth_two_years_max):
        """Sets the eps_growth_two_years_max of this ScreenerRequest.

        The maximum EPS growth in the last two years. This value is annualized.  # noqa: E501

        :param eps_growth_two_years_max: The eps_growth_two_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_two_years_max = eps_growth_two_years_max

    @property
    def eps_growth_three_years_min(self):
        """Gets the eps_growth_three_years_min of this ScreenerRequest.  # noqa: E501

        The minimum EPS growth in the last three years. This value is annualized.  # noqa: E501

        :return: The eps_growth_three_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_three_years_min

    @eps_growth_three_years_min.setter
    def eps_growth_three_years_min(self, eps_growth_three_years_min):
        """Sets the eps_growth_three_years_min of this ScreenerRequest.

        The minimum EPS growth in the last three years. This value is annualized.  # noqa: E501

        :param eps_growth_three_years_min: The eps_growth_three_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_three_years_min = eps_growth_three_years_min

    @property
    def eps_growth_three_years_max(self):
        """Gets the eps_growth_three_years_max of this ScreenerRequest.  # noqa: E501

        The maximum EPS growth in the last three years. This value is annualized.  # noqa: E501

        :return: The eps_growth_three_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_three_years_max

    @eps_growth_three_years_max.setter
    def eps_growth_three_years_max(self, eps_growth_three_years_max):
        """Sets the eps_growth_three_years_max of this ScreenerRequest.

        The maximum EPS growth in the last three years. This value is annualized.  # noqa: E501

        :param eps_growth_three_years_max: The eps_growth_three_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_three_years_max = eps_growth_three_years_max

    @property
    def eps_growth_five_years_min(self):
        """Gets the eps_growth_five_years_min of this ScreenerRequest.  # noqa: E501

        The minimum EPS growth in the last five years. This value is annualized.  # noqa: E501

        :return: The eps_growth_five_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_five_years_min

    @eps_growth_five_years_min.setter
    def eps_growth_five_years_min(self, eps_growth_five_years_min):
        """Sets the eps_growth_five_years_min of this ScreenerRequest.

        The minimum EPS growth in the last five years. This value is annualized.  # noqa: E501

        :param eps_growth_five_years_min: The eps_growth_five_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_five_years_min = eps_growth_five_years_min

    @property
    def eps_growth_five_years_max(self):
        """Gets the eps_growth_five_years_max of this ScreenerRequest.  # noqa: E501

        The maximum EPS growth in the last five years. This value is annualized.  # noqa: E501

        :return: The eps_growth_five_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_five_years_max

    @eps_growth_five_years_max.setter
    def eps_growth_five_years_max(self, eps_growth_five_years_max):
        """Sets the eps_growth_five_years_max of this ScreenerRequest.

        The maximum EPS growth in the last five years. This value is annualized.  # noqa: E501

        :param eps_growth_five_years_max: The eps_growth_five_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_five_years_max = eps_growth_five_years_max

    @property
    def eps_growth_ten_years_min(self):
        """Gets the eps_growth_ten_years_min of this ScreenerRequest.  # noqa: E501

        The minimum EPS growth in the last ten years. This value is annualized.  # noqa: E501

        :return: The eps_growth_ten_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_ten_years_min

    @eps_growth_ten_years_min.setter
    def eps_growth_ten_years_min(self, eps_growth_ten_years_min):
        """Sets the eps_growth_ten_years_min of this ScreenerRequest.

        The minimum EPS growth in the last ten years. This value is annualized.  # noqa: E501

        :param eps_growth_ten_years_min: The eps_growth_ten_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_ten_years_min = eps_growth_ten_years_min

    @property
    def eps_growth_ten_years_max(self):
        """Gets the eps_growth_ten_years_max of this ScreenerRequest.  # noqa: E501

        The maximum EPS growth in the last ten years. This value is annualized.  # noqa: E501

        :return: The eps_growth_ten_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_ten_years_max

    @eps_growth_ten_years_max.setter
    def eps_growth_ten_years_max(self, eps_growth_ten_years_max):
        """Sets the eps_growth_ten_years_max of this ScreenerRequest.

        The maximum EPS growth in the last ten years. This value is annualized.  # noqa: E501

        :param eps_growth_ten_years_max: The eps_growth_ten_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_ten_years_max = eps_growth_ten_years_max

    @property
    def eps_growth_twenty_years_min(self):
        """Gets the eps_growth_twenty_years_min of this ScreenerRequest.  # noqa: E501

        The minimum EPS growth in the last twenty years. This value is annualized.  # noqa: E501

        :return: The eps_growth_twenty_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_twenty_years_min

    @eps_growth_twenty_years_min.setter
    def eps_growth_twenty_years_min(self, eps_growth_twenty_years_min):
        """Sets the eps_growth_twenty_years_min of this ScreenerRequest.

        The minimum EPS growth in the last twenty years. This value is annualized.  # noqa: E501

        :param eps_growth_twenty_years_min: The eps_growth_twenty_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_twenty_years_min = eps_growth_twenty_years_min

    @property
    def eps_growth_twenty_years_max(self):
        """Gets the eps_growth_twenty_years_max of this ScreenerRequest.  # noqa: E501

        The maximum EPS growth in the last twenty years. This value is annualized.  # noqa: E501

        :return: The eps_growth_twenty_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._eps_growth_twenty_years_max

    @eps_growth_twenty_years_max.setter
    def eps_growth_twenty_years_max(self, eps_growth_twenty_years_max):
        """Sets the eps_growth_twenty_years_max of this ScreenerRequest.

        The maximum EPS growth in the last twenty years. This value is annualized.  # noqa: E501

        :param eps_growth_twenty_years_max: The eps_growth_twenty_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._eps_growth_twenty_years_max = eps_growth_twenty_years_max

    @property
    def pe_min(self):
        """Gets the pe_min of this ScreenerRequest.  # noqa: E501

        The minimum price to earnings value.  # noqa: E501

        :return: The pe_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._pe_min

    @pe_min.setter
    def pe_min(self, pe_min):
        """Sets the pe_min of this ScreenerRequest.

        The minimum price to earnings value.  # noqa: E501

        :param pe_min: The pe_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._pe_min = pe_min

    @property
    def pe_max(self):
        """Gets the pe_max of this ScreenerRequest.  # noqa: E501

        The maximum price to earnings value.  # noqa: E501

        :return: The pe_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._pe_max

    @pe_max.setter
    def pe_max(self, pe_max):
        """Sets the pe_max of this ScreenerRequest.

        The maximum price to earnings value.  # noqa: E501

        :param pe_max: The pe_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._pe_max = pe_max

    @property
    def peg_min(self):
        """Gets the peg_min of this ScreenerRequest.  # noqa: E501

        The minimum price to earnings to growth value.  # noqa: E501

        :return: The peg_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._peg_min

    @peg_min.setter
    def peg_min(self, peg_min):
        """Sets the peg_min of this ScreenerRequest.

        The minimum price to earnings to growth value.  # noqa: E501

        :param peg_min: The peg_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._peg_min = peg_min

    @property
    def peg_max(self):
        """Gets the peg_max of this ScreenerRequest.  # noqa: E501

        The maximum price to earnings to growth value.  # noqa: E501

        :return: The peg_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._peg_max

    @peg_max.setter
    def peg_max(self, peg_max):
        """Sets the peg_max of this ScreenerRequest.

        The maximum price to earnings to growth value.  # noqa: E501

        :param peg_max: The peg_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._peg_max = peg_max

    @property
    def price_fcf_min(self):
        """Gets the price_fcf_min of this ScreenerRequest.  # noqa: E501

        The minimum price to free cash flow value.  # noqa: E501

        :return: The price_fcf_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_fcf_min

    @price_fcf_min.setter
    def price_fcf_min(self, price_fcf_min):
        """Sets the price_fcf_min of this ScreenerRequest.

        The minimum price to free cash flow value.  # noqa: E501

        :param price_fcf_min: The price_fcf_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._price_fcf_min = price_fcf_min

    @property
    def price_fcf_max(self):
        """Gets the price_fcf_max of this ScreenerRequest.  # noqa: E501

        The maximum price to free cash flow value.  # noqa: E501

        :return: The price_fcf_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_fcf_max

    @price_fcf_max.setter
    def price_fcf_max(self, price_fcf_max):
        """Sets the price_fcf_max of this ScreenerRequest.

        The maximum price to free cash flow value.  # noqa: E501

        :param price_fcf_max: The price_fcf_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._price_fcf_max = price_fcf_max

    @property
    def book_value_per_share_min(self):
        """Gets the book_value_per_share_min of this ScreenerRequest.  # noqa: E501

        The minimum book value per share.  # noqa: E501

        :return: The book_value_per_share_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._book_value_per_share_min

    @book_value_per_share_min.setter
    def book_value_per_share_min(self, book_value_per_share_min):
        """Sets the book_value_per_share_min of this ScreenerRequest.

        The minimum book value per share.  # noqa: E501

        :param book_value_per_share_min: The book_value_per_share_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._book_value_per_share_min = book_value_per_share_min

    @property
    def book_value_per_share_max(self):
        """Gets the book_value_per_share_max of this ScreenerRequest.  # noqa: E501

        The maximum book value per share.  # noqa: E501

        :return: The book_value_per_share_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._book_value_per_share_max

    @book_value_per_share_max.setter
    def book_value_per_share_max(self, book_value_per_share_max):
        """Sets the book_value_per_share_max of this ScreenerRequest.

        The maximum book value per share.  # noqa: E501

        :param book_value_per_share_max: The book_value_per_share_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._book_value_per_share_max = book_value_per_share_max

    @property
    def price_book_value_per_share_min(self):
        """Gets the price_book_value_per_share_min of this ScreenerRequest.  # noqa: E501

        The minimum price to book value.  # noqa: E501

        :return: The price_book_value_per_share_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_book_value_per_share_min

    @price_book_value_per_share_min.setter
    def price_book_value_per_share_min(self, price_book_value_per_share_min):
        """Sets the price_book_value_per_share_min of this ScreenerRequest.

        The minimum price to book value.  # noqa: E501

        :param price_book_value_per_share_min: The price_book_value_per_share_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._price_book_value_per_share_min = price_book_value_per_share_min

    @property
    def price_book_value_per_share_max(self):
        """Gets the price_book_value_per_share_max of this ScreenerRequest.  # noqa: E501

        The maximum price to book value.  # noqa: E501

        :return: The price_book_value_per_share_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_book_value_per_share_max

    @price_book_value_per_share_max.setter
    def price_book_value_per_share_max(self, price_book_value_per_share_max):
        """Sets the price_book_value_per_share_max of this ScreenerRequest.

        The maximum price to book value.  # noqa: E501

        :param price_book_value_per_share_max: The price_book_value_per_share_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._price_book_value_per_share_max = price_book_value_per_share_max

    @property
    def payout_min(self):
        """Gets the payout_min of this ScreenerRequest.  # noqa: E501

        The minimum payout ratio (as percentage).  # noqa: E501

        :return: The payout_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._payout_min

    @payout_min.setter
    def payout_min(self, payout_min):
        """Sets the payout_min of this ScreenerRequest.

        The minimum payout ratio (as percentage).  # noqa: E501

        :param payout_min: The payout_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._payout_min = payout_min

    @property
    def payout_max(self):
        """Gets the payout_max of this ScreenerRequest.  # noqa: E501

        The maximum payout ratio (as percentage).  # noqa: E501

        :return: The payout_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._payout_max

    @payout_max.setter
    def payout_max(self, payout_max):
        """Sets the payout_max of this ScreenerRequest.

        The maximum payout ratio (as percentage).  # noqa: E501

        :param payout_max: The payout_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._payout_max = payout_max

    @property
    def debt_to_equity_min(self):
        """Gets the debt_to_equity_min of this ScreenerRequest.  # noqa: E501

        The minimum debt to equity ratio (as percentage).  # noqa: E501

        :return: The debt_to_equity_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._debt_to_equity_min

    @debt_to_equity_min.setter
    def debt_to_equity_min(self, debt_to_equity_min):
        """Sets the debt_to_equity_min of this ScreenerRequest.

        The minimum debt to equity ratio (as percentage).  # noqa: E501

        :param debt_to_equity_min: The debt_to_equity_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._debt_to_equity_min = debt_to_equity_min

    @property
    def debt_to_equity_max(self):
        """Gets the debt_to_equity_max of this ScreenerRequest.  # noqa: E501

        The maximum debt to equity ratio (as percentage).  # noqa: E501

        :return: The debt_to_equity_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._debt_to_equity_max

    @debt_to_equity_max.setter
    def debt_to_equity_max(self, debt_to_equity_max):
        """Sets the debt_to_equity_max of this ScreenerRequest.

        The maximum debt to equity ratio (as percentage).  # noqa: E501

        :param debt_to_equity_max: The debt_to_equity_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._debt_to_equity_max = debt_to_equity_max

    @property
    def gross_margin_min(self):
        """Gets the gross_margin_min of this ScreenerRequest.  # noqa: E501

        The minimum gross margin (as percentage).  # noqa: E501

        :return: The gross_margin_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._gross_margin_min

    @gross_margin_min.setter
    def gross_margin_min(self, gross_margin_min):
        """Sets the gross_margin_min of this ScreenerRequest.

        The minimum gross margin (as percentage).  # noqa: E501

        :param gross_margin_min: The gross_margin_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._gross_margin_min = gross_margin_min

    @property
    def gross_margin_max(self):
        """Gets the gross_margin_max of this ScreenerRequest.  # noqa: E501

        The maximum gross margin (as percentage).  # noqa: E501

        :return: The gross_margin_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._gross_margin_max

    @gross_margin_max.setter
    def gross_margin_max(self, gross_margin_max):
        """Sets the gross_margin_max of this ScreenerRequest.

        The maximum gross margin (as percentage).  # noqa: E501

        :param gross_margin_max: The gross_margin_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._gross_margin_max = gross_margin_max

    @property
    def operating_margin_min(self):
        """Gets the operating_margin_min of this ScreenerRequest.  # noqa: E501

        The minimum operating margin (as percentage).  # noqa: E501

        :return: The operating_margin_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._operating_margin_min

    @operating_margin_min.setter
    def operating_margin_min(self, operating_margin_min):
        """Sets the operating_margin_min of this ScreenerRequest.

        The minimum operating margin (as percentage).  # noqa: E501

        :param operating_margin_min: The operating_margin_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._operating_margin_min = operating_margin_min

    @property
    def operating_margin_max(self):
        """Gets the operating_margin_max of this ScreenerRequest.  # noqa: E501

        The maximum operating margin (as percentage).  # noqa: E501

        :return: The operating_margin_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._operating_margin_max

    @operating_margin_max.setter
    def operating_margin_max(self, operating_margin_max):
        """Sets the operating_margin_max of this ScreenerRequest.

        The maximum operating margin (as percentage).  # noqa: E501

        :param operating_margin_max: The operating_margin_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._operating_margin_max = operating_margin_max

    @property
    def profit_margin_min(self):
        """Gets the profit_margin_min of this ScreenerRequest.  # noqa: E501

        The minimum profit margin (as percentage).  # noqa: E501

        :return: The profit_margin_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._profit_margin_min

    @profit_margin_min.setter
    def profit_margin_min(self, profit_margin_min):
        """Sets the profit_margin_min of this ScreenerRequest.

        The minimum profit margin (as percentage).  # noqa: E501

        :param profit_margin_min: The profit_margin_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._profit_margin_min = profit_margin_min

    @property
    def profit_margin_max(self):
        """Gets the profit_margin_max of this ScreenerRequest.  # noqa: E501

        The maximum profit margin (as percentage).  # noqa: E501

        :return: The profit_margin_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._profit_margin_max

    @profit_margin_max.setter
    def profit_margin_max(self, profit_margin_max):
        """Sets the profit_margin_max of this ScreenerRequest.

        The maximum profit margin (as percentage).  # noqa: E501

        :param profit_margin_max: The profit_margin_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._profit_margin_max = profit_margin_max

    @property
    def price_to_sales_min(self):
        """Gets the price_to_sales_min of this ScreenerRequest.  # noqa: E501

        The minimum price to sales ratio.  # noqa: E501

        :return: The price_to_sales_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_to_sales_min

    @price_to_sales_min.setter
    def price_to_sales_min(self, price_to_sales_min):
        """Sets the price_to_sales_min of this ScreenerRequest.

        The minimum price to sales ratio.  # noqa: E501

        :param price_to_sales_min: The price_to_sales_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._price_to_sales_min = price_to_sales_min

    @property
    def price_to_sales_max(self):
        """Gets the price_to_sales_max of this ScreenerRequest.  # noqa: E501

        The maximum price to sales ratio.  # noqa: E501

        :return: The price_to_sales_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_to_sales_max

    @price_to_sales_max.setter
    def price_to_sales_max(self, price_to_sales_max):
        """Sets the price_to_sales_max of this ScreenerRequest.

        The maximum price to sales ratio.  # noqa: E501

        :param price_to_sales_max: The price_to_sales_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._price_to_sales_max = price_to_sales_max

    @property
    def buybacks_three_months_min(self):
        """Gets the buybacks_three_months_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_three_months_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_three_months_min

    @buybacks_three_months_min.setter
    def buybacks_three_months_min(self, buybacks_three_months_min):
        """Sets the buybacks_three_months_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_three_months_min: The buybacks_three_months_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_three_months_min = buybacks_three_months_min

    @property
    def buybacks_three_months_max(self):
        """Gets the buybacks_three_months_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_three_months_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_three_months_max

    @buybacks_three_months_max.setter
    def buybacks_three_months_max(self, buybacks_three_months_max):
        """Sets the buybacks_three_months_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_three_months_max: The buybacks_three_months_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_three_months_max = buybacks_three_months_max

    @property
    def buybacks_six_months_min(self):
        """Gets the buybacks_six_months_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_six_months_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_six_months_min

    @buybacks_six_months_min.setter
    def buybacks_six_months_min(self, buybacks_six_months_min):
        """Sets the buybacks_six_months_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_six_months_min: The buybacks_six_months_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_six_months_min = buybacks_six_months_min

    @property
    def buybacks_six_months_max(self):
        """Gets the buybacks_six_months_max of this ScreenerRequest.  # noqa: E501


        :return: The buybacks_six_months_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_six_months_max

    @buybacks_six_months_max.setter
    def buybacks_six_months_max(self, buybacks_six_months_max):
        """Sets the buybacks_six_months_max of this ScreenerRequest.


        :param buybacks_six_months_max: The buybacks_six_months_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_six_months_max = buybacks_six_months_max

    @property
    def buybacks_one_year_min(self):
        """Gets the buybacks_one_year_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_one_year_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_one_year_min

    @buybacks_one_year_min.setter
    def buybacks_one_year_min(self, buybacks_one_year_min):
        """Sets the buybacks_one_year_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_one_year_min: The buybacks_one_year_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_one_year_min = buybacks_one_year_min

    @property
    def buybacks_one_year_max(self):
        """Gets the buybacks_one_year_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_one_year_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_one_year_max

    @buybacks_one_year_max.setter
    def buybacks_one_year_max(self, buybacks_one_year_max):
        """Sets the buybacks_one_year_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_one_year_max: The buybacks_one_year_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_one_year_max = buybacks_one_year_max

    @property
    def buybacks_two_years_min(self):
        """Gets the buybacks_two_years_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_two_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_two_years_min

    @buybacks_two_years_min.setter
    def buybacks_two_years_min(self, buybacks_two_years_min):
        """Sets the buybacks_two_years_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_two_years_min: The buybacks_two_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_two_years_min = buybacks_two_years_min

    @property
    def buybacks_two_years_max(self):
        """Gets the buybacks_two_years_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_two_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_two_years_max

    @buybacks_two_years_max.setter
    def buybacks_two_years_max(self, buybacks_two_years_max):
        """Sets the buybacks_two_years_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_two_years_max: The buybacks_two_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_two_years_max = buybacks_two_years_max

    @property
    def buybacks_three_years_min(self):
        """Gets the buybacks_three_years_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_three_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_three_years_min

    @buybacks_three_years_min.setter
    def buybacks_three_years_min(self, buybacks_three_years_min):
        """Sets the buybacks_three_years_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_three_years_min: The buybacks_three_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_three_years_min = buybacks_three_years_min

    @property
    def buybacks_three_years_max(self):
        """Gets the buybacks_three_years_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_three_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_three_years_max

    @buybacks_three_years_max.setter
    def buybacks_three_years_max(self, buybacks_three_years_max):
        """Sets the buybacks_three_years_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_three_years_max: The buybacks_three_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_three_years_max = buybacks_three_years_max

    @property
    def buybacks_five_years_min(self):
        """Gets the buybacks_five_years_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_five_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_five_years_min

    @buybacks_five_years_min.setter
    def buybacks_five_years_min(self, buybacks_five_years_min):
        """Sets the buybacks_five_years_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_five_years_min: The buybacks_five_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_five_years_min = buybacks_five_years_min

    @property
    def buybacks_five_years_max(self):
        """Gets the buybacks_five_years_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_five_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_five_years_max

    @buybacks_five_years_max.setter
    def buybacks_five_years_max(self, buybacks_five_years_max):
        """Sets the buybacks_five_years_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_five_years_max: The buybacks_five_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_five_years_max = buybacks_five_years_max

    @property
    def buybacks_ten_years_min(self):
        """Gets the buybacks_ten_years_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_ten_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_ten_years_min

    @buybacks_ten_years_min.setter
    def buybacks_ten_years_min(self, buybacks_ten_years_min):
        """Sets the buybacks_ten_years_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_ten_years_min: The buybacks_ten_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_ten_years_min = buybacks_ten_years_min

    @property
    def buybacks_ten_years_max(self):
        """Gets the buybacks_ten_years_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_ten_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_ten_years_max

    @buybacks_ten_years_max.setter
    def buybacks_ten_years_max(self, buybacks_ten_years_max):
        """Sets the buybacks_ten_years_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_ten_years_max: The buybacks_ten_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_ten_years_max = buybacks_ten_years_max

    @property
    def buybacks_twenty_years_min(self):
        """Gets the buybacks_twenty_years_min of this ScreenerRequest.  # noqa: E501

        The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_twenty_years_min of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_twenty_years_min

    @buybacks_twenty_years_min.setter
    def buybacks_twenty_years_min(self, buybacks_twenty_years_min):
        """Sets the buybacks_twenty_years_min of this ScreenerRequest.

        The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_twenty_years_min: The buybacks_twenty_years_min of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_twenty_years_min = buybacks_twenty_years_min

    @property
    def buybacks_twenty_years_max(self):
        """Gets the buybacks_twenty_years_max of this ScreenerRequest.  # noqa: E501

        The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.  # noqa: E501

        :return: The buybacks_twenty_years_max of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._buybacks_twenty_years_max

    @buybacks_twenty_years_max.setter
    def buybacks_twenty_years_max(self, buybacks_twenty_years_max):
        """Sets the buybacks_twenty_years_max of this ScreenerRequest.

        The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.  # noqa: E501

        :param buybacks_twenty_years_max: The buybacks_twenty_years_max of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._buybacks_twenty_years_max = buybacks_twenty_years_max

    @property
    def potential_upside(self):
        """Gets the potential_upside of this ScreenerRequest.  # noqa: E501

        The upside potential according to the analysts' target price consensus (as percentage). I.e. If the stock price is $100 and the analysts' target price consensus is $150 then the potential upside is 50%.  # noqa: E501

        :return: The potential_upside of this ScreenerRequest.  # noqa: E501
        :rtype: float
        """
        return self._potential_upside

    @potential_upside.setter
    def potential_upside(self, potential_upside):
        """Sets the potential_upside of this ScreenerRequest.

        The upside potential according to the analysts' target price consensus (as percentage). I.e. If the stock price is $100 and the analysts' target price consensus is $150 then the potential upside is 50%.  # noqa: E501

        :param potential_upside: The potential_upside of this ScreenerRequest.  # noqa: E501
        :type: float
        """

        self._potential_upside = potential_upside

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
