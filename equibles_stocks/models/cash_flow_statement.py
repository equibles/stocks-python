# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CashFlowStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operating_cash_flow': 'int',
        'payments_for_operating_activities': 'int',
        'proceeds_from_operating_activities': 'int',
        'change_in_operating_liabilities': 'int',
        'change_in_operating_assets': 'int',
        'depreciation_depletion_and_amortization': 'int',
        'capital_expenditures': 'int',
        'change_in_receivables': 'int',
        'change_in_inventory': 'int',
        'profit_loss': 'int',
        'investments': 'int',
        'cash_flow_from_investment': 'int',
        'cash_flow_from_financing': 'int',
        'proceeds_from_repayments_of_short_term_debt': 'int',
        'payments_for_repurchase_of_common_stock': 'int',
        'payments_for_repurchase_of_equity': 'int',
        'payments_for_repurchase_of_preferred_stock': 'int',
        'dividend_payout': 'int',
        'dividend_payout_common_stock': 'int',
        'dividend_payout_preferred_stock': 'int',
        'proceeds_from_issuance_of_common_stock': 'int',
        'proceeds_from_issuance_of_long_term_debt_and_capital_securities_net': 'int',
        'proceeds_from_issuance_of_preferred_stock': 'int',
        'proceeds_from_repurchase_of_equity': 'int',
        'proceeds_from_sale_of_treasury_stock': 'int',
        'change_in_cash_and_cash_equivalents': 'int',
        'change_in_exchange_rate': 'int',
        'net_income': 'int',
        'net_borrowings': 'int',
        'change_in_working_capital': 'int',
        'other_non_cash_items': 'int',
        'free_cash_flow': 'int'
    }

    attribute_map = {
        'operating_cash_flow': 'operatingCashFlow',
        'payments_for_operating_activities': 'paymentsForOperatingActivities',
        'proceeds_from_operating_activities': 'proceedsFromOperatingActivities',
        'change_in_operating_liabilities': 'changeInOperatingLiabilities',
        'change_in_operating_assets': 'changeInOperatingAssets',
        'depreciation_depletion_and_amortization': 'depreciationDepletionAndAmortization',
        'capital_expenditures': 'capitalExpenditures',
        'change_in_receivables': 'changeInReceivables',
        'change_in_inventory': 'changeInInventory',
        'profit_loss': 'profitLoss',
        'investments': 'investments',
        'cash_flow_from_investment': 'cashFlowFromInvestment',
        'cash_flow_from_financing': 'cashFlowFromFinancing',
        'proceeds_from_repayments_of_short_term_debt': 'proceedsFromRepaymentsOfShortTermDebt',
        'payments_for_repurchase_of_common_stock': 'paymentsForRepurchaseOfCommonStock',
        'payments_for_repurchase_of_equity': 'paymentsForRepurchaseOfEquity',
        'payments_for_repurchase_of_preferred_stock': 'paymentsForRepurchaseOfPreferredStock',
        'dividend_payout': 'dividendPayout',
        'dividend_payout_common_stock': 'dividendPayoutCommonStock',
        'dividend_payout_preferred_stock': 'dividendPayoutPreferredStock',
        'proceeds_from_issuance_of_common_stock': 'proceedsFromIssuanceOfCommonStock',
        'proceeds_from_issuance_of_long_term_debt_and_capital_securities_net': 'proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet',
        'proceeds_from_issuance_of_preferred_stock': 'proceedsFromIssuanceOfPreferredStock',
        'proceeds_from_repurchase_of_equity': 'proceedsFromRepurchaseOfEquity',
        'proceeds_from_sale_of_treasury_stock': 'proceedsFromSaleOfTreasuryStock',
        'change_in_cash_and_cash_equivalents': 'changeInCashAndCashEquivalents',
        'change_in_exchange_rate': 'changeInExchangeRate',
        'net_income': 'netIncome',
        'net_borrowings': 'netBorrowings',
        'change_in_working_capital': 'changeInWorkingCapital',
        'other_non_cash_items': 'otherNonCashItems',
        'free_cash_flow': 'freeCashFlow'
    }

    def __init__(self, operating_cash_flow=None, payments_for_operating_activities=None, proceeds_from_operating_activities=None, change_in_operating_liabilities=None, change_in_operating_assets=None, depreciation_depletion_and_amortization=None, capital_expenditures=None, change_in_receivables=None, change_in_inventory=None, profit_loss=None, investments=None, cash_flow_from_investment=None, cash_flow_from_financing=None, proceeds_from_repayments_of_short_term_debt=None, payments_for_repurchase_of_common_stock=None, payments_for_repurchase_of_equity=None, payments_for_repurchase_of_preferred_stock=None, dividend_payout=None, dividend_payout_common_stock=None, dividend_payout_preferred_stock=None, proceeds_from_issuance_of_common_stock=None, proceeds_from_issuance_of_long_term_debt_and_capital_securities_net=None, proceeds_from_issuance_of_preferred_stock=None, proceeds_from_repurchase_of_equity=None, proceeds_from_sale_of_treasury_stock=None, change_in_cash_and_cash_equivalents=None, change_in_exchange_rate=None, net_income=None, net_borrowings=None, change_in_working_capital=None, other_non_cash_items=None, free_cash_flow=None):  # noqa: E501
        """CashFlowStatement - a model defined in Swagger"""  # noqa: E501
        self._operating_cash_flow = None
        self._payments_for_operating_activities = None
        self._proceeds_from_operating_activities = None
        self._change_in_operating_liabilities = None
        self._change_in_operating_assets = None
        self._depreciation_depletion_and_amortization = None
        self._capital_expenditures = None
        self._change_in_receivables = None
        self._change_in_inventory = None
        self._profit_loss = None
        self._investments = None
        self._cash_flow_from_investment = None
        self._cash_flow_from_financing = None
        self._proceeds_from_repayments_of_short_term_debt = None
        self._payments_for_repurchase_of_common_stock = None
        self._payments_for_repurchase_of_equity = None
        self._payments_for_repurchase_of_preferred_stock = None
        self._dividend_payout = None
        self._dividend_payout_common_stock = None
        self._dividend_payout_preferred_stock = None
        self._proceeds_from_issuance_of_common_stock = None
        self._proceeds_from_issuance_of_long_term_debt_and_capital_securities_net = None
        self._proceeds_from_issuance_of_preferred_stock = None
        self._proceeds_from_repurchase_of_equity = None
        self._proceeds_from_sale_of_treasury_stock = None
        self._change_in_cash_and_cash_equivalents = None
        self._change_in_exchange_rate = None
        self._net_income = None
        self._net_borrowings = None
        self._change_in_working_capital = None
        self._other_non_cash_items = None
        self._free_cash_flow = None
        self.discriminator = None
        if operating_cash_flow is not None:
            self.operating_cash_flow = operating_cash_flow
        if payments_for_operating_activities is not None:
            self.payments_for_operating_activities = payments_for_operating_activities
        if proceeds_from_operating_activities is not None:
            self.proceeds_from_operating_activities = proceeds_from_operating_activities
        if change_in_operating_liabilities is not None:
            self.change_in_operating_liabilities = change_in_operating_liabilities
        if change_in_operating_assets is not None:
            self.change_in_operating_assets = change_in_operating_assets
        if depreciation_depletion_and_amortization is not None:
            self.depreciation_depletion_and_amortization = depreciation_depletion_and_amortization
        if capital_expenditures is not None:
            self.capital_expenditures = capital_expenditures
        if change_in_receivables is not None:
            self.change_in_receivables = change_in_receivables
        if change_in_inventory is not None:
            self.change_in_inventory = change_in_inventory
        if profit_loss is not None:
            self.profit_loss = profit_loss
        if investments is not None:
            self.investments = investments
        if cash_flow_from_investment is not None:
            self.cash_flow_from_investment = cash_flow_from_investment
        if cash_flow_from_financing is not None:
            self.cash_flow_from_financing = cash_flow_from_financing
        if proceeds_from_repayments_of_short_term_debt is not None:
            self.proceeds_from_repayments_of_short_term_debt = proceeds_from_repayments_of_short_term_debt
        if payments_for_repurchase_of_common_stock is not None:
            self.payments_for_repurchase_of_common_stock = payments_for_repurchase_of_common_stock
        if payments_for_repurchase_of_equity is not None:
            self.payments_for_repurchase_of_equity = payments_for_repurchase_of_equity
        if payments_for_repurchase_of_preferred_stock is not None:
            self.payments_for_repurchase_of_preferred_stock = payments_for_repurchase_of_preferred_stock
        if dividend_payout is not None:
            self.dividend_payout = dividend_payout
        if dividend_payout_common_stock is not None:
            self.dividend_payout_common_stock = dividend_payout_common_stock
        if dividend_payout_preferred_stock is not None:
            self.dividend_payout_preferred_stock = dividend_payout_preferred_stock
        if proceeds_from_issuance_of_common_stock is not None:
            self.proceeds_from_issuance_of_common_stock = proceeds_from_issuance_of_common_stock
        if proceeds_from_issuance_of_long_term_debt_and_capital_securities_net is not None:
            self.proceeds_from_issuance_of_long_term_debt_and_capital_securities_net = proceeds_from_issuance_of_long_term_debt_and_capital_securities_net
        if proceeds_from_issuance_of_preferred_stock is not None:
            self.proceeds_from_issuance_of_preferred_stock = proceeds_from_issuance_of_preferred_stock
        if proceeds_from_repurchase_of_equity is not None:
            self.proceeds_from_repurchase_of_equity = proceeds_from_repurchase_of_equity
        if proceeds_from_sale_of_treasury_stock is not None:
            self.proceeds_from_sale_of_treasury_stock = proceeds_from_sale_of_treasury_stock
        if change_in_cash_and_cash_equivalents is not None:
            self.change_in_cash_and_cash_equivalents = change_in_cash_and_cash_equivalents
        if change_in_exchange_rate is not None:
            self.change_in_exchange_rate = change_in_exchange_rate
        if net_income is not None:
            self.net_income = net_income
        if net_borrowings is not None:
            self.net_borrowings = net_borrowings
        if change_in_working_capital is not None:
            self.change_in_working_capital = change_in_working_capital
        if other_non_cash_items is not None:
            self.other_non_cash_items = other_non_cash_items
        if free_cash_flow is not None:
            self.free_cash_flow = free_cash_flow

    @property
    def operating_cash_flow(self):
        """Gets the operating_cash_flow of this CashFlowStatement.  # noqa: E501


        :return: The operating_cash_flow of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._operating_cash_flow

    @operating_cash_flow.setter
    def operating_cash_flow(self, operating_cash_flow):
        """Sets the operating_cash_flow of this CashFlowStatement.


        :param operating_cash_flow: The operating_cash_flow of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._operating_cash_flow = operating_cash_flow

    @property
    def payments_for_operating_activities(self):
        """Gets the payments_for_operating_activities of this CashFlowStatement.  # noqa: E501


        :return: The payments_for_operating_activities of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._payments_for_operating_activities

    @payments_for_operating_activities.setter
    def payments_for_operating_activities(self, payments_for_operating_activities):
        """Sets the payments_for_operating_activities of this CashFlowStatement.


        :param payments_for_operating_activities: The payments_for_operating_activities of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._payments_for_operating_activities = payments_for_operating_activities

    @property
    def proceeds_from_operating_activities(self):
        """Gets the proceeds_from_operating_activities of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_operating_activities of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_operating_activities

    @proceeds_from_operating_activities.setter
    def proceeds_from_operating_activities(self, proceeds_from_operating_activities):
        """Sets the proceeds_from_operating_activities of this CashFlowStatement.


        :param proceeds_from_operating_activities: The proceeds_from_operating_activities of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_operating_activities = proceeds_from_operating_activities

    @property
    def change_in_operating_liabilities(self):
        """Gets the change_in_operating_liabilities of this CashFlowStatement.  # noqa: E501


        :return: The change_in_operating_liabilities of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_operating_liabilities

    @change_in_operating_liabilities.setter
    def change_in_operating_liabilities(self, change_in_operating_liabilities):
        """Sets the change_in_operating_liabilities of this CashFlowStatement.


        :param change_in_operating_liabilities: The change_in_operating_liabilities of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_operating_liabilities = change_in_operating_liabilities

    @property
    def change_in_operating_assets(self):
        """Gets the change_in_operating_assets of this CashFlowStatement.  # noqa: E501


        :return: The change_in_operating_assets of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_operating_assets

    @change_in_operating_assets.setter
    def change_in_operating_assets(self, change_in_operating_assets):
        """Sets the change_in_operating_assets of this CashFlowStatement.


        :param change_in_operating_assets: The change_in_operating_assets of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_operating_assets = change_in_operating_assets

    @property
    def depreciation_depletion_and_amortization(self):
        """Gets the depreciation_depletion_and_amortization of this CashFlowStatement.  # noqa: E501


        :return: The depreciation_depletion_and_amortization of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._depreciation_depletion_and_amortization

    @depreciation_depletion_and_amortization.setter
    def depreciation_depletion_and_amortization(self, depreciation_depletion_and_amortization):
        """Sets the depreciation_depletion_and_amortization of this CashFlowStatement.


        :param depreciation_depletion_and_amortization: The depreciation_depletion_and_amortization of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._depreciation_depletion_and_amortization = depreciation_depletion_and_amortization

    @property
    def capital_expenditures(self):
        """Gets the capital_expenditures of this CashFlowStatement.  # noqa: E501


        :return: The capital_expenditures of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._capital_expenditures

    @capital_expenditures.setter
    def capital_expenditures(self, capital_expenditures):
        """Sets the capital_expenditures of this CashFlowStatement.


        :param capital_expenditures: The capital_expenditures of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._capital_expenditures = capital_expenditures

    @property
    def change_in_receivables(self):
        """Gets the change_in_receivables of this CashFlowStatement.  # noqa: E501


        :return: The change_in_receivables of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_receivables

    @change_in_receivables.setter
    def change_in_receivables(self, change_in_receivables):
        """Sets the change_in_receivables of this CashFlowStatement.


        :param change_in_receivables: The change_in_receivables of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_receivables = change_in_receivables

    @property
    def change_in_inventory(self):
        """Gets the change_in_inventory of this CashFlowStatement.  # noqa: E501


        :return: The change_in_inventory of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_inventory

    @change_in_inventory.setter
    def change_in_inventory(self, change_in_inventory):
        """Sets the change_in_inventory of this CashFlowStatement.


        :param change_in_inventory: The change_in_inventory of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_inventory = change_in_inventory

    @property
    def profit_loss(self):
        """Gets the profit_loss of this CashFlowStatement.  # noqa: E501


        :return: The profit_loss of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._profit_loss

    @profit_loss.setter
    def profit_loss(self, profit_loss):
        """Sets the profit_loss of this CashFlowStatement.


        :param profit_loss: The profit_loss of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._profit_loss = profit_loss

    @property
    def investments(self):
        """Gets the investments of this CashFlowStatement.  # noqa: E501


        :return: The investments of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """Sets the investments of this CashFlowStatement.


        :param investments: The investments of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._investments = investments

    @property
    def cash_flow_from_investment(self):
        """Gets the cash_flow_from_investment of this CashFlowStatement.  # noqa: E501


        :return: The cash_flow_from_investment of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._cash_flow_from_investment

    @cash_flow_from_investment.setter
    def cash_flow_from_investment(self, cash_flow_from_investment):
        """Sets the cash_flow_from_investment of this CashFlowStatement.


        :param cash_flow_from_investment: The cash_flow_from_investment of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._cash_flow_from_investment = cash_flow_from_investment

    @property
    def cash_flow_from_financing(self):
        """Gets the cash_flow_from_financing of this CashFlowStatement.  # noqa: E501


        :return: The cash_flow_from_financing of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._cash_flow_from_financing

    @cash_flow_from_financing.setter
    def cash_flow_from_financing(self, cash_flow_from_financing):
        """Sets the cash_flow_from_financing of this CashFlowStatement.


        :param cash_flow_from_financing: The cash_flow_from_financing of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._cash_flow_from_financing = cash_flow_from_financing

    @property
    def proceeds_from_repayments_of_short_term_debt(self):
        """Gets the proceeds_from_repayments_of_short_term_debt of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_repayments_of_short_term_debt of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_repayments_of_short_term_debt

    @proceeds_from_repayments_of_short_term_debt.setter
    def proceeds_from_repayments_of_short_term_debt(self, proceeds_from_repayments_of_short_term_debt):
        """Sets the proceeds_from_repayments_of_short_term_debt of this CashFlowStatement.


        :param proceeds_from_repayments_of_short_term_debt: The proceeds_from_repayments_of_short_term_debt of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_repayments_of_short_term_debt = proceeds_from_repayments_of_short_term_debt

    @property
    def payments_for_repurchase_of_common_stock(self):
        """Gets the payments_for_repurchase_of_common_stock of this CashFlowStatement.  # noqa: E501


        :return: The payments_for_repurchase_of_common_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._payments_for_repurchase_of_common_stock

    @payments_for_repurchase_of_common_stock.setter
    def payments_for_repurchase_of_common_stock(self, payments_for_repurchase_of_common_stock):
        """Sets the payments_for_repurchase_of_common_stock of this CashFlowStatement.


        :param payments_for_repurchase_of_common_stock: The payments_for_repurchase_of_common_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._payments_for_repurchase_of_common_stock = payments_for_repurchase_of_common_stock

    @property
    def payments_for_repurchase_of_equity(self):
        """Gets the payments_for_repurchase_of_equity of this CashFlowStatement.  # noqa: E501


        :return: The payments_for_repurchase_of_equity of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._payments_for_repurchase_of_equity

    @payments_for_repurchase_of_equity.setter
    def payments_for_repurchase_of_equity(self, payments_for_repurchase_of_equity):
        """Sets the payments_for_repurchase_of_equity of this CashFlowStatement.


        :param payments_for_repurchase_of_equity: The payments_for_repurchase_of_equity of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._payments_for_repurchase_of_equity = payments_for_repurchase_of_equity

    @property
    def payments_for_repurchase_of_preferred_stock(self):
        """Gets the payments_for_repurchase_of_preferred_stock of this CashFlowStatement.  # noqa: E501


        :return: The payments_for_repurchase_of_preferred_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._payments_for_repurchase_of_preferred_stock

    @payments_for_repurchase_of_preferred_stock.setter
    def payments_for_repurchase_of_preferred_stock(self, payments_for_repurchase_of_preferred_stock):
        """Sets the payments_for_repurchase_of_preferred_stock of this CashFlowStatement.


        :param payments_for_repurchase_of_preferred_stock: The payments_for_repurchase_of_preferred_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._payments_for_repurchase_of_preferred_stock = payments_for_repurchase_of_preferred_stock

    @property
    def dividend_payout(self):
        """Gets the dividend_payout of this CashFlowStatement.  # noqa: E501


        :return: The dividend_payout of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._dividend_payout

    @dividend_payout.setter
    def dividend_payout(self, dividend_payout):
        """Sets the dividend_payout of this CashFlowStatement.


        :param dividend_payout: The dividend_payout of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._dividend_payout = dividend_payout

    @property
    def dividend_payout_common_stock(self):
        """Gets the dividend_payout_common_stock of this CashFlowStatement.  # noqa: E501


        :return: The dividend_payout_common_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._dividend_payout_common_stock

    @dividend_payout_common_stock.setter
    def dividend_payout_common_stock(self, dividend_payout_common_stock):
        """Sets the dividend_payout_common_stock of this CashFlowStatement.


        :param dividend_payout_common_stock: The dividend_payout_common_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._dividend_payout_common_stock = dividend_payout_common_stock

    @property
    def dividend_payout_preferred_stock(self):
        """Gets the dividend_payout_preferred_stock of this CashFlowStatement.  # noqa: E501


        :return: The dividend_payout_preferred_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._dividend_payout_preferred_stock

    @dividend_payout_preferred_stock.setter
    def dividend_payout_preferred_stock(self, dividend_payout_preferred_stock):
        """Sets the dividend_payout_preferred_stock of this CashFlowStatement.


        :param dividend_payout_preferred_stock: The dividend_payout_preferred_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._dividend_payout_preferred_stock = dividend_payout_preferred_stock

    @property
    def proceeds_from_issuance_of_common_stock(self):
        """Gets the proceeds_from_issuance_of_common_stock of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_issuance_of_common_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_issuance_of_common_stock

    @proceeds_from_issuance_of_common_stock.setter
    def proceeds_from_issuance_of_common_stock(self, proceeds_from_issuance_of_common_stock):
        """Sets the proceeds_from_issuance_of_common_stock of this CashFlowStatement.


        :param proceeds_from_issuance_of_common_stock: The proceeds_from_issuance_of_common_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_issuance_of_common_stock = proceeds_from_issuance_of_common_stock

    @property
    def proceeds_from_issuance_of_long_term_debt_and_capital_securities_net(self):
        """Gets the proceeds_from_issuance_of_long_term_debt_and_capital_securities_net of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_issuance_of_long_term_debt_and_capital_securities_net of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_issuance_of_long_term_debt_and_capital_securities_net

    @proceeds_from_issuance_of_long_term_debt_and_capital_securities_net.setter
    def proceeds_from_issuance_of_long_term_debt_and_capital_securities_net(self, proceeds_from_issuance_of_long_term_debt_and_capital_securities_net):
        """Sets the proceeds_from_issuance_of_long_term_debt_and_capital_securities_net of this CashFlowStatement.


        :param proceeds_from_issuance_of_long_term_debt_and_capital_securities_net: The proceeds_from_issuance_of_long_term_debt_and_capital_securities_net of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_issuance_of_long_term_debt_and_capital_securities_net = proceeds_from_issuance_of_long_term_debt_and_capital_securities_net

    @property
    def proceeds_from_issuance_of_preferred_stock(self):
        """Gets the proceeds_from_issuance_of_preferred_stock of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_issuance_of_preferred_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_issuance_of_preferred_stock

    @proceeds_from_issuance_of_preferred_stock.setter
    def proceeds_from_issuance_of_preferred_stock(self, proceeds_from_issuance_of_preferred_stock):
        """Sets the proceeds_from_issuance_of_preferred_stock of this CashFlowStatement.


        :param proceeds_from_issuance_of_preferred_stock: The proceeds_from_issuance_of_preferred_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_issuance_of_preferred_stock = proceeds_from_issuance_of_preferred_stock

    @property
    def proceeds_from_repurchase_of_equity(self):
        """Gets the proceeds_from_repurchase_of_equity of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_repurchase_of_equity of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_repurchase_of_equity

    @proceeds_from_repurchase_of_equity.setter
    def proceeds_from_repurchase_of_equity(self, proceeds_from_repurchase_of_equity):
        """Sets the proceeds_from_repurchase_of_equity of this CashFlowStatement.


        :param proceeds_from_repurchase_of_equity: The proceeds_from_repurchase_of_equity of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_repurchase_of_equity = proceeds_from_repurchase_of_equity

    @property
    def proceeds_from_sale_of_treasury_stock(self):
        """Gets the proceeds_from_sale_of_treasury_stock of this CashFlowStatement.  # noqa: E501


        :return: The proceeds_from_sale_of_treasury_stock of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._proceeds_from_sale_of_treasury_stock

    @proceeds_from_sale_of_treasury_stock.setter
    def proceeds_from_sale_of_treasury_stock(self, proceeds_from_sale_of_treasury_stock):
        """Sets the proceeds_from_sale_of_treasury_stock of this CashFlowStatement.


        :param proceeds_from_sale_of_treasury_stock: The proceeds_from_sale_of_treasury_stock of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._proceeds_from_sale_of_treasury_stock = proceeds_from_sale_of_treasury_stock

    @property
    def change_in_cash_and_cash_equivalents(self):
        """Gets the change_in_cash_and_cash_equivalents of this CashFlowStatement.  # noqa: E501


        :return: The change_in_cash_and_cash_equivalents of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_cash_and_cash_equivalents

    @change_in_cash_and_cash_equivalents.setter
    def change_in_cash_and_cash_equivalents(self, change_in_cash_and_cash_equivalents):
        """Sets the change_in_cash_and_cash_equivalents of this CashFlowStatement.


        :param change_in_cash_and_cash_equivalents: The change_in_cash_and_cash_equivalents of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_cash_and_cash_equivalents = change_in_cash_and_cash_equivalents

    @property
    def change_in_exchange_rate(self):
        """Gets the change_in_exchange_rate of this CashFlowStatement.  # noqa: E501


        :return: The change_in_exchange_rate of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_exchange_rate

    @change_in_exchange_rate.setter
    def change_in_exchange_rate(self, change_in_exchange_rate):
        """Sets the change_in_exchange_rate of this CashFlowStatement.


        :param change_in_exchange_rate: The change_in_exchange_rate of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_exchange_rate = change_in_exchange_rate

    @property
    def net_income(self):
        """Gets the net_income of this CashFlowStatement.  # noqa: E501


        :return: The net_income of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this CashFlowStatement.


        :param net_income: The net_income of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._net_income = net_income

    @property
    def net_borrowings(self):
        """Gets the net_borrowings of this CashFlowStatement.  # noqa: E501


        :return: The net_borrowings of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._net_borrowings

    @net_borrowings.setter
    def net_borrowings(self, net_borrowings):
        """Sets the net_borrowings of this CashFlowStatement.


        :param net_borrowings: The net_borrowings of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._net_borrowings = net_borrowings

    @property
    def change_in_working_capital(self):
        """Gets the change_in_working_capital of this CashFlowStatement.  # noqa: E501


        :return: The change_in_working_capital of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._change_in_working_capital

    @change_in_working_capital.setter
    def change_in_working_capital(self, change_in_working_capital):
        """Sets the change_in_working_capital of this CashFlowStatement.


        :param change_in_working_capital: The change_in_working_capital of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._change_in_working_capital = change_in_working_capital

    @property
    def other_non_cash_items(self):
        """Gets the other_non_cash_items of this CashFlowStatement.  # noqa: E501


        :return: The other_non_cash_items of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._other_non_cash_items

    @other_non_cash_items.setter
    def other_non_cash_items(self, other_non_cash_items):
        """Sets the other_non_cash_items of this CashFlowStatement.


        :param other_non_cash_items: The other_non_cash_items of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._other_non_cash_items = other_non_cash_items

    @property
    def free_cash_flow(self):
        """Gets the free_cash_flow of this CashFlowStatement.  # noqa: E501


        :return: The free_cash_flow of this CashFlowStatement.  # noqa: E501
        :rtype: int
        """
        return self._free_cash_flow

    @free_cash_flow.setter
    def free_cash_flow(self, free_cash_flow):
        """Sets the free_cash_flow of this CashFlowStatement.


        :param free_cash_flow: The free_cash_flow of this CashFlowStatement.  # noqa: E501
        :type: int
        """

        self._free_cash_flow = free_cash_flow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CashFlowStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashFlowStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
