# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonStock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logo': 'Image',
        'address': 'str',
        'cik': 'str',
        'locale': 'str',
        'market_cap': 'int',
        'shares_outstanding_last': 'int',
        'phone_number': 'str',
        'description': 'str',
        'employees': 'int',
        'delisted': 'bool',
        'list_date': 'datetime',
        'website': 'str',
        'industry': 'Industry',
        'officers': 'list[Officer]',
        'ticker': 'str',
        'full_ticker': 'str',
        'asset_type': 'AssetType',
        'name': 'str',
        'exchange': 'Exchange',
        'last_price': 'Price'
    }

    attribute_map = {
        'logo': 'logo',
        'address': 'address',
        'cik': 'cik',
        'locale': 'locale',
        'market_cap': 'marketCap',
        'shares_outstanding_last': 'sharesOutstandingLast',
        'phone_number': 'phoneNumber',
        'description': 'description',
        'employees': 'employees',
        'delisted': 'delisted',
        'list_date': 'listDate',
        'website': 'website',
        'industry': 'industry',
        'officers': 'officers',
        'ticker': 'ticker',
        'full_ticker': 'fullTicker',
        'asset_type': 'assetType',
        'name': 'name',
        'exchange': 'exchange',
        'last_price': 'lastPrice'
    }

    def __init__(self, logo=None, address=None, cik=None, locale=None, market_cap=None, shares_outstanding_last=None, phone_number=None, description=None, employees=None, delisted=None, list_date=None, website=None, industry=None, officers=None, ticker=None, full_ticker=None, asset_type=None, name=None, exchange=None, last_price=None):  # noqa: E501
        """CommonStock - a model defined in Swagger"""  # noqa: E501
        self._logo = None
        self._address = None
        self._cik = None
        self._locale = None
        self._market_cap = None
        self._shares_outstanding_last = None
        self._phone_number = None
        self._description = None
        self._employees = None
        self._delisted = None
        self._list_date = None
        self._website = None
        self._industry = None
        self._officers = None
        self._ticker = None
        self._full_ticker = None
        self._asset_type = None
        self._name = None
        self._exchange = None
        self._last_price = None
        self.discriminator = None
        if logo is not None:
            self.logo = logo
        if address is not None:
            self.address = address
        if cik is not None:
            self.cik = cik
        if locale is not None:
            self.locale = locale
        if market_cap is not None:
            self.market_cap = market_cap
        if shares_outstanding_last is not None:
            self.shares_outstanding_last = shares_outstanding_last
        if phone_number is not None:
            self.phone_number = phone_number
        if description is not None:
            self.description = description
        if employees is not None:
            self.employees = employees
        if delisted is not None:
            self.delisted = delisted
        if list_date is not None:
            self.list_date = list_date
        if website is not None:
            self.website = website
        if industry is not None:
            self.industry = industry
        if officers is not None:
            self.officers = officers
        if ticker is not None:
            self.ticker = ticker
        if full_ticker is not None:
            self.full_ticker = full_ticker
        if asset_type is not None:
            self.asset_type = asset_type
        if name is not None:
            self.name = name
        if exchange is not None:
            self.exchange = exchange
        if last_price is not None:
            self.last_price = last_price

    @property
    def logo(self):
        """Gets the logo of this CommonStock.  # noqa: E501


        :return: The logo of this CommonStock.  # noqa: E501
        :rtype: Image
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CommonStock.


        :param logo: The logo of this CommonStock.  # noqa: E501
        :type: Image
        """

        self._logo = logo

    @property
    def address(self):
        """Gets the address of this CommonStock.  # noqa: E501


        :return: The address of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CommonStock.


        :param address: The address of this CommonStock.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def cik(self):
        """Gets the cik of this CommonStock.  # noqa: E501


        :return: The cik of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this CommonStock.


        :param cik: The cik of this CommonStock.  # noqa: E501
        :type: str
        """

        self._cik = cik

    @property
    def locale(self):
        """Gets the locale of this CommonStock.  # noqa: E501


        :return: The locale of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this CommonStock.


        :param locale: The locale of this CommonStock.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def market_cap(self):
        """Gets the market_cap of this CommonStock.  # noqa: E501


        :return: The market_cap of this CommonStock.  # noqa: E501
        :rtype: int
        """
        return self._market_cap

    @market_cap.setter
    def market_cap(self, market_cap):
        """Sets the market_cap of this CommonStock.


        :param market_cap: The market_cap of this CommonStock.  # noqa: E501
        :type: int
        """

        self._market_cap = market_cap

    @property
    def shares_outstanding_last(self):
        """Gets the shares_outstanding_last of this CommonStock.  # noqa: E501


        :return: The shares_outstanding_last of this CommonStock.  # noqa: E501
        :rtype: int
        """
        return self._shares_outstanding_last

    @shares_outstanding_last.setter
    def shares_outstanding_last(self, shares_outstanding_last):
        """Sets the shares_outstanding_last of this CommonStock.


        :param shares_outstanding_last: The shares_outstanding_last of this CommonStock.  # noqa: E501
        :type: int
        """

        self._shares_outstanding_last = shares_outstanding_last

    @property
    def phone_number(self):
        """Gets the phone_number of this CommonStock.  # noqa: E501


        :return: The phone_number of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CommonStock.


        :param phone_number: The phone_number of this CommonStock.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def description(self):
        """Gets the description of this CommonStock.  # noqa: E501


        :return: The description of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonStock.


        :param description: The description of this CommonStock.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def employees(self):
        """Gets the employees of this CommonStock.  # noqa: E501


        :return: The employees of this CommonStock.  # noqa: E501
        :rtype: int
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this CommonStock.


        :param employees: The employees of this CommonStock.  # noqa: E501
        :type: int
        """

        self._employees = employees

    @property
    def delisted(self):
        """Gets the delisted of this CommonStock.  # noqa: E501


        :return: The delisted of this CommonStock.  # noqa: E501
        :rtype: bool
        """
        return self._delisted

    @delisted.setter
    def delisted(self, delisted):
        """Sets the delisted of this CommonStock.


        :param delisted: The delisted of this CommonStock.  # noqa: E501
        :type: bool
        """

        self._delisted = delisted

    @property
    def list_date(self):
        """Gets the list_date of this CommonStock.  # noqa: E501


        :return: The list_date of this CommonStock.  # noqa: E501
        :rtype: datetime
        """
        return self._list_date

    @list_date.setter
    def list_date(self, list_date):
        """Sets the list_date of this CommonStock.


        :param list_date: The list_date of this CommonStock.  # noqa: E501
        :type: datetime
        """

        self._list_date = list_date

    @property
    def website(self):
        """Gets the website of this CommonStock.  # noqa: E501


        :return: The website of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CommonStock.


        :param website: The website of this CommonStock.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def industry(self):
        """Gets the industry of this CommonStock.  # noqa: E501


        :return: The industry of this CommonStock.  # noqa: E501
        :rtype: Industry
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CommonStock.


        :param industry: The industry of this CommonStock.  # noqa: E501
        :type: Industry
        """

        self._industry = industry

    @property
    def officers(self):
        """Gets the officers of this CommonStock.  # noqa: E501


        :return: The officers of this CommonStock.  # noqa: E501
        :rtype: list[Officer]
        """
        return self._officers

    @officers.setter
    def officers(self, officers):
        """Sets the officers of this CommonStock.


        :param officers: The officers of this CommonStock.  # noqa: E501
        :type: list[Officer]
        """

        self._officers = officers

    @property
    def ticker(self):
        """Gets the ticker of this CommonStock.  # noqa: E501


        :return: The ticker of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this CommonStock.


        :param ticker: The ticker of this CommonStock.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def full_ticker(self):
        """Gets the full_ticker of this CommonStock.  # noqa: E501


        :return: The full_ticker of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._full_ticker

    @full_ticker.setter
    def full_ticker(self, full_ticker):
        """Sets the full_ticker of this CommonStock.


        :param full_ticker: The full_ticker of this CommonStock.  # noqa: E501
        :type: str
        """

        self._full_ticker = full_ticker

    @property
    def asset_type(self):
        """Gets the asset_type of this CommonStock.  # noqa: E501


        :return: The asset_type of this CommonStock.  # noqa: E501
        :rtype: AssetType
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this CommonStock.


        :param asset_type: The asset_type of this CommonStock.  # noqa: E501
        :type: AssetType
        """

        self._asset_type = asset_type

    @property
    def name(self):
        """Gets the name of this CommonStock.  # noqa: E501


        :return: The name of this CommonStock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonStock.


        :param name: The name of this CommonStock.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def exchange(self):
        """Gets the exchange of this CommonStock.  # noqa: E501


        :return: The exchange of this CommonStock.  # noqa: E501
        :rtype: Exchange
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this CommonStock.


        :param exchange: The exchange of this CommonStock.  # noqa: E501
        :type: Exchange
        """

        self._exchange = exchange

    @property
    def last_price(self):
        """Gets the last_price of this CommonStock.  # noqa: E501


        :return: The last_price of this CommonStock.  # noqa: E501
        :rtype: Price
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this CommonStock.


        :param last_price: The last_price of this CommonStock.  # noqa: E501
        :type: Price
        """

        self._last_price = last_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonStock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonStock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
