# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dividend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'ex_date': 'datetime',
        'payment_date': 'datetime',
        'record_date': 'datetime'
    }

    attribute_map = {
        'amount': 'amount',
        'ex_date': 'exDate',
        'payment_date': 'paymentDate',
        'record_date': 'recordDate'
    }

    def __init__(self, amount=None, ex_date=None, payment_date=None, record_date=None):  # noqa: E501
        """Dividend - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._ex_date = None
        self._payment_date = None
        self._record_date = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if ex_date is not None:
            self.ex_date = ex_date
        if payment_date is not None:
            self.payment_date = payment_date
        if record_date is not None:
            self.record_date = record_date

    @property
    def amount(self):
        """Gets the amount of this Dividend.  # noqa: E501


        :return: The amount of this Dividend.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Dividend.


        :param amount: The amount of this Dividend.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def ex_date(self):
        """Gets the ex_date of this Dividend.  # noqa: E501


        :return: The ex_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._ex_date

    @ex_date.setter
    def ex_date(self, ex_date):
        """Sets the ex_date of this Dividend.


        :param ex_date: The ex_date of this Dividend.  # noqa: E501
        :type: datetime
        """

        self._ex_date = ex_date

    @property
    def payment_date(self):
        """Gets the payment_date of this Dividend.  # noqa: E501


        :return: The payment_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Dividend.


        :param payment_date: The payment_date of this Dividend.  # noqa: E501
        :type: datetime
        """

        self._payment_date = payment_date

    @property
    def record_date(self):
        """Gets the record_date of this Dividend.  # noqa: E501


        :return: The record_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._record_date

    @record_date.setter
    def record_date(self, record_date):
        """Sets the record_date of this Dividend.


        :param record_date: The record_date of this Dividend.  # noqa: E501
        :type: datetime
        """

        self._record_date = record_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dividend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dividend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
