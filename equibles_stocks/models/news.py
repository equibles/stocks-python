# coding: utf-8

"""
    Stocks

    <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>  # noqa: E501

    OpenAPI spec version: v1
    Contact: equibles@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class News(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'amp_url': 'str',
        'article_url': 'str',
        'author': 'str',
        'description': 'str',
        'image_url': 'str',
        'keywords': 'list[str]',
        'financial_assets': 'list[str]',
        'published_time': 'datetime',
        'publisher_name': 'str'
    }

    attribute_map = {
        'title': 'title',
        'amp_url': 'ampUrl',
        'article_url': 'articleUrl',
        'author': 'author',
        'description': 'description',
        'image_url': 'imageUrl',
        'keywords': 'keywords',
        'financial_assets': 'financialAssets',
        'published_time': 'publishedTime',
        'publisher_name': 'publisherName'
    }

    def __init__(self, title=None, amp_url=None, article_url=None, author=None, description=None, image_url=None, keywords=None, financial_assets=None, published_time=None, publisher_name=None):  # noqa: E501
        """News - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._amp_url = None
        self._article_url = None
        self._author = None
        self._description = None
        self._image_url = None
        self._keywords = None
        self._financial_assets = None
        self._published_time = None
        self._publisher_name = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if amp_url is not None:
            self.amp_url = amp_url
        if article_url is not None:
            self.article_url = article_url
        if author is not None:
            self.author = author
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if keywords is not None:
            self.keywords = keywords
        if financial_assets is not None:
            self.financial_assets = financial_assets
        if published_time is not None:
            self.published_time = published_time
        if publisher_name is not None:
            self.publisher_name = publisher_name

    @property
    def title(self):
        """Gets the title of this News.  # noqa: E501


        :return: The title of this News.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this News.


        :param title: The title of this News.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def amp_url(self):
        """Gets the amp_url of this News.  # noqa: E501


        :return: The amp_url of this News.  # noqa: E501
        :rtype: str
        """
        return self._amp_url

    @amp_url.setter
    def amp_url(self, amp_url):
        """Sets the amp_url of this News.


        :param amp_url: The amp_url of this News.  # noqa: E501
        :type: str
        """

        self._amp_url = amp_url

    @property
    def article_url(self):
        """Gets the article_url of this News.  # noqa: E501


        :return: The article_url of this News.  # noqa: E501
        :rtype: str
        """
        return self._article_url

    @article_url.setter
    def article_url(self, article_url):
        """Sets the article_url of this News.


        :param article_url: The article_url of this News.  # noqa: E501
        :type: str
        """

        self._article_url = article_url

    @property
    def author(self):
        """Gets the author of this News.  # noqa: E501


        :return: The author of this News.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this News.


        :param author: The author of this News.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def description(self):
        """Gets the description of this News.  # noqa: E501


        :return: The description of this News.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this News.


        :param description: The description of this News.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this News.  # noqa: E501


        :return: The image_url of this News.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this News.


        :param image_url: The image_url of this News.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def keywords(self):
        """Gets the keywords of this News.  # noqa: E501


        :return: The keywords of this News.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this News.


        :param keywords: The keywords of this News.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def financial_assets(self):
        """Gets the financial_assets of this News.  # noqa: E501


        :return: The financial_assets of this News.  # noqa: E501
        :rtype: list[str]
        """
        return self._financial_assets

    @financial_assets.setter
    def financial_assets(self, financial_assets):
        """Sets the financial_assets of this News.


        :param financial_assets: The financial_assets of this News.  # noqa: E501
        :type: list[str]
        """

        self._financial_assets = financial_assets

    @property
    def published_time(self):
        """Gets the published_time of this News.  # noqa: E501


        :return: The published_time of this News.  # noqa: E501
        :rtype: datetime
        """
        return self._published_time

    @published_time.setter
    def published_time(self, published_time):
        """Sets the published_time of this News.


        :param published_time: The published_time of this News.  # noqa: E501
        :type: datetime
        """

        self._published_time = published_time

    @property
    def publisher_name(self):
        """Gets the publisher_name of this News.  # noqa: E501


        :return: The publisher_name of this News.  # noqa: E501
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this News.


        :param publisher_name: The publisher_name of this News.  # noqa: E501
        :type: str
        """

        self._publisher_name = publisher_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(News, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, News):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
